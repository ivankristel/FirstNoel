/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GUIcs192.java
 *
 * Created on Jan 20, 2012, 9:52:02 AM
 */
package firstnoel;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.Statement;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author vanessa vivien
 */
public class GUIcs192 extends javax.swing.JFrame implements ActionListener{

    String pattern = "[a-zA-Z]*";

   
    Timer timer = null;
    /** Creates new form GUIcs192 */
    public GUIcs192() {
        
        initComponents();
        timer = new Timer( 1000 , new TimerListener() );
         saveClient.addActionListener((ActionListener)this); 
         jComboBox1.addActionListener((ActionListener)this);
         dropDownService.addActionListener((ActionListener)this);
         addClient3.addActionListener((ActionListener)this);
        addEmployee3.addActionListener((ActionListener)this);
        genReport3.addActionListener((ActionListener)this);
        viewClientProf3.addActionListener((ActionListener)this);
        viewEmployee3.addActionListener((ActionListener)this);
        modifyE3.addActionListener((ActionListener)this);
        isClientExist.addActionListener((ActionListener)this);
        homeButton.addActionListener((ActionListener)this);
        jButton6.addActionListener((ActionListener)this);
         cNameInput.addKeyListener(new KeyAdapter(){
            @Override
            public void keyTyped(KeyEvent e){
                char c = e.getKeyChar();
                if(!((Character.isLetter(c)) || (c == KeyEvent.VK_BACK_SPACE) || (Character.isSpaceChar(c))
                        || (c == KeyEvent.VK_PERIOD) || (c == KeyEvent.VK_DELETE))){
                    getToolkit().beep();
                    e.consume();
                }         
            } 
        });
        cSexInput.addKeyListener(new KeyAdapter() {
        @Override
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if (!((c == 'M') || (c == 'F') || (c == 'f') || (c == 'm')||
                (c == KeyEvent.VK_BACK_SPACE) ||
                (c == KeyEvent.VK_DELETE))) {
                getToolkit().beep();
                e.consume();
            }
            }
        });       
       /** cAgeInput.addKeyListener(new KeyAdapter() {
        @Override
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if (!((c >= '0') && (c <= '9') ||
                (c == KeyEvent.VK_BACK_SPACE) ||
                (c == KeyEvent.VK_DELETE))) {
                getToolkit().beep();
                e.consume();
            }
            }
        });**/
        
        cBdayInput.addKeyListener(new KeyAdapter() {
        @Override
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if (!((c >= '0') && (c <= '9') ||
                (c == KeyEvent.VK_BACK_SPACE) ||
                (c == KeyEvent.VK_SLASH) ||
                (c == KeyEvent.VK_MINUS) ||
                (c == KeyEvent.VK_DELETE))) {
                getToolkit().beep();
                e.consume();
            }
            }
        });
        cContactInput1.addKeyListener(new KeyAdapter() {
        @Override
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if (!((c >= '0') && (c <= '9') ||
                (c == KeyEvent.VK_BACK_SPACE) ||
                (c == KeyEvent.VK_DELETE))) {
                getToolkit().beep();
                e.consume();
            }
            }
        });
        cContactInput2.addKeyListener(new KeyAdapter() {
        @Override
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if (!((c >= '0') && (c <= '9') ||
                (c == KeyEvent.VK_BACK_SPACE) ||
                (c == KeyEvent.VK_DELETE))) {
                getToolkit().beep();
                e.consume();
            }
            }
        });
        timer.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        viewClientProf3 = new javax.swing.JButton();
        addClient3 = new javax.swing.JButton();
        viewEmployee3 = new javax.swing.JButton();
        addEmployee3 = new javax.swing.JButton();
        genReport3 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        modifyE3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cNameInput = new javax.swing.JTextField();
        cBdayInput = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        cContactInput1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cSexInput = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        cAddressInput1 = new javax.swing.JTextField();
        cContactInput2 = new javax.swing.JTextField();
        cAddressInput2 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        cOccupationInput = new javax.swing.JTextField();
        oDateInput = new javax.swing.JLabel();
        oTimeInput = new javax.swing.JLabel();
        isClientExist = new javax.swing.JButton();
        clientExist = new javax.swing.JLabel();
        IDClient = new javax.swing.JLabel();
        saveClient = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        dropDownService = new javax.swing.JComboBox();
        homeButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel6.setLayout(null);

        viewClientProf3.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        viewClientProf3.setText("View Client Profile");
        jPanel6.add(viewClientProf3);
        viewClientProf3.setBounds(10, 190, 160, 30);

        addClient3.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        addClient3.setText("Add Client");
        jPanel6.add(addClient3);
        addClient3.setBounds(10, 240, 160, 30);

        viewEmployee3.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        viewEmployee3.setText("View Employee Profile");
        jPanel6.add(viewEmployee3);
        viewEmployee3.setBounds(10, 290, 160, 30);

        addEmployee3.setFont(new java.awt.Font("Lucida Handwriting", 0, 11)); // NOI18N
        addEmployee3.setText("Add Employee");
        jPanel6.add(addEmployee3);
        addEmployee3.setBounds(10, 360, 160, 30);

        genReport3.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        genReport3.setText("Generate Report");
        jPanel6.add(genReport3);
        genReport3.setBounds(10, 460, 160, 30);

        jLabel18.setFont(new java.awt.Font("Serif", 1, 12)); // NOI18N
        jLabel18.setText("EMPLOYEE");
        jPanel6.add(jLabel18);
        jLabel18.setBounds(10, 330, 150, 20);

        modifyE3.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        modifyE3.setText("Modify");
        jPanel6.add(modifyE3);
        modifyE3.setBounds(10, 410, 160, 30);

        jLabel3.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        jLabel3.setText("Date:");

        jLabel4.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        jLabel4.setText("Time:");

        jLabel6.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        jLabel6.setText("Name:");

        jLabel7.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        jLabel7.setText("Birthday:");

        cNameInput.setText("Enter Name");

        cBdayInput.setText("YYYY-MM-DD");
        cBdayInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBdayInputActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        jLabel10.setText("Contact no:");

        cContactInput1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cContactInput1ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        jLabel8.setText("Sex:");

        cSexInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cSexInputActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        jLabel9.setText("Address:");

        cContactInput2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cContactInput2ActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        jLabel14.setText("Occupation:");

        oDateInput.setText("-");

        oTimeInput.setText("-");

        isClientExist.setText("SEE IF CLIENT EXISTS");
        isClientExist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isClientExistActionPerformed(evt);
            }
        });

        clientExist.setText("New Client");

        IDClient.setText("ID");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cNameInput))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(oDateInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(oTimeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cAddressInput2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cAddressInput1)
                            .addComponent(cOccupationInput)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(cSexInput, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(cBdayInput, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cContactInput1, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                            .addComponent(cContactInput2)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(isClientExist)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(clientExist, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(IDClient)
                        .addGap(34, 34, 34)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(oDateInput)
                    .addComponent(oTimeInput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cNameInput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isClientExist)
                    .addComponent(clientExist)
                    .addComponent(IDClient))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cBdayInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(cContactInput1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cSexInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(cContactInput2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cOccupationInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cAddressInput1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cAddressInput2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75))
        );

        jPanel6.add(jPanel3);
        jPanel3.setBounds(230, 180, 390, 270);

        saveClient.setFont(new java.awt.Font("Goudy Old Style", 1, 16)); // NOI18N
        saveClient.setText("Save");
        jPanel6.add(saveClient);
        saveClient.setBounds(600, 500, 80, 30);

        jButton6.setFont(new java.awt.Font("Goudy Old Style", 1, 16)); // NOI18N
        jButton6.setText("Cancel");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton6);
        jButton6.setBounds(600, 540, 77, 29);

        jLabel1.setFont(new java.awt.Font("Perpetua Titling MT", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("FIRST NOEL CORPORATION");
        jPanel6.add(jLabel1);
        jLabel1.setBounds(10, 60, 530, 50);

        jLabel5.setFont(new java.awt.Font("Imprint MT Shadow", 0, 24)); // NOI18N
        jLabel5.setText("CLIENT PROFILE");
        jPanel6.add(jLabel5);
        jLabel5.setBounds(220, 140, 240, 29);

        jLabel11.setFont(new java.awt.Font("Imprint MT Shadow", 0, 24)); // NOI18N
        jLabel11.setText("RECORD");
        jPanel6.add(jLabel11);
        jLabel11.setBounds(220, 460, 120, 30);

        jLabel12.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        jLabel12.setText("Name of Therapist:");

        Connection con = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        //String nameOfTherapist[]=null;

        String url = "jdbc:mysql://localhost:3306/firstnoel?AllowMultipleQueries=true";
        String user = "lian";
        String password = "lian";

        try {

            con = (Connection) DriverManager.getConnection(url, user, password);
            pst = (PreparedStatement) con.prepareStatement("SELECT * FROM employee WHERE e_status = true");
            rs = pst.executeQuery();
            jComboBox1.addItem("Choose Therapist");
            while (rs.next()) {
                System.out.print(rs.getInt(1));
                System.out.print(": ");
                System.out.println(rs.getString(2));
                //nameOfTherapist[rs.getInt(1)-1] = rs.getString(2);
                jComboBox1.addItem(rs.getString(2));
            }

        } catch (SQLException ex) {
            Logger lgr = Logger.getLogger(AddEmployee.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);

        } finally {

            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (con != null) {
                    con.close();
                }

            } catch (SQLException ex) {
                Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                lgr.log(Level.WARNING, ex.getMessage(), ex);
            }
        }

        jLabel13.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        jLabel13.setText("Service Provided:");

        PreparedStatement therapist_choice = null;
        PreparedStatement getKnownService = null;
        ResultSet knowServiceSet = null;
        ResultSet therapistChoice = null;
        int knowServiceNum;

        /*Connection con = null;

        ResultSet rs = null;
        //String nameOfTherapist[]=null;

        String url = "jdbc:mysql://localhost:3306/firstnoel?AllowMultipleQueries=true";
        String user = "lian";
        String password = "lian";*/

        try {

            con = (Connection) DriverManager.getConnection(url, user, password);

            String selectedTherapist = jComboBox1.getSelectedItem().toString();
            int employ_num;
            String query2 = "SELECT * FROM employee WHERE employee.e_name=?";

            //therapist_choice = (PreparedStatement) con.prepareStatement(query2);
            //therapist_choice.setString(1,selectedTherapist);
            //therapistChoice = therapist_choice.executeQuery();
            //therapistChoice.next();
            //employ_num = therapistChoice.getInt(1);

            /*String query3 = "Select ServiceNum FROM employeeservice WHERE EmployNum=?";
            getKnownService = (PreparedStatement) con.prepareStatement(query3);
            getKnownService.setInt(1,employ_num);
            knowServiceSet = getKnownService.executeQuery();
            dropDownService.addItem("Choose Service");
            */
            //while(knowServiceSet.next())
            //{
                //knowServiceNum = knowServiceSet.getInt(1);
                //  pst = (PreparedStatement) con.prepareStatement("SELECT * FROM service WHERE service.s_number=? ");
                //pst.setInt(1,knowServiceNum);
                pst = (PreparedStatement) con.prepareStatement("SELECT * FROM service");
                rs = pst.executeQuery();

                while (rs.next())
                {
                    System.out.print(rs.getInt(1));
                    System.out.print(": ");
                    System.out.println(rs.getString(2));
                    //nameOfTherapist[rs.getInt(1)-1] = rs.getString(2);
                    dropDownService.addItem(rs.getString(2));
                }

                //}

        } catch (SQLException ex) {
            Logger lgr = Logger.getLogger(AddEmployee.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);

        } finally {

            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (con != null) {
                    con.close();
                }

            } catch (SQLException ex) {
                Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                lgr.log(Level.WARNING, ex.getMessage(), ex);
            }
        }
        dropDownService.removeAll();
        dropDownService.revalidate();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(32, 32, 32)
                        .addComponent(dropDownService, 0, 199, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, 0, 182, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(dropDownService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        jPanel6.add(jPanel1);
        jPanel1.setBounds(230, 490, 350, 100);

        homeButton.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        homeButton.setText("Home");
        jPanel6.add(homeButton);
        homeButton.setBounds(10, 140, 160, 30);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bg3.png"))); // NOI18N
        jLabel2.setMaximumSize(new java.awt.Dimension(829, 630));
        jLabel2.setMinimumSize(new java.awt.Dimension(829, 630));
        jPanel6.add(jLabel2);
        jLabel2.setBounds(0, 0, 790, 630);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 790, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void cContactInput1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cContactInput1ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_cContactInput1ActionPerformed

private void cContactInput2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cContactInput2ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_cContactInput2ActionPerformed

    private void cSexInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cSexInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cSexInputActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void cBdayInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBdayInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cBdayInputActionPerformed

    private void isClientExistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isClientExistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isClientExistActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIcs192.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIcs192.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIcs192.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIcs192.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
         

    //long msec = date.getTime();
    //System.out.println("Milliseconds since Jan. 1, 1970 GMT = " + msec);
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                
                
                
                 new GUIcs192().setVisible(true);
                 
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel IDClient;
    private javax.swing.JButton addClient3;
    private javax.swing.JButton addEmployee3;
    private javax.swing.JTextField cAddressInput1;
    private javax.swing.JTextField cAddressInput2;
    private javax.swing.JTextField cBdayInput;
    private javax.swing.JTextField cContactInput1;
    private javax.swing.JTextField cContactInput2;
    private javax.swing.JTextField cNameInput;
    private javax.swing.JTextField cOccupationInput;
    private javax.swing.JTextField cSexInput;
    private javax.swing.JLabel clientExist;
    public javax.swing.JComboBox dropDownService;
    private javax.swing.JButton genReport3;
    private javax.swing.JButton homeButton;
    private javax.swing.JButton isClientExist;
    private javax.swing.JButton jButton6;
    public javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton modifyE3;
    public static javax.swing.JLabel oDateInput;
    public static javax.swing.JLabel oTimeInput;
    private javax.swing.JButton saveClient;
    private javax.swing.JButton viewClientProf3;
    private javax.swing.JButton viewEmployee3;
    // End of variables declaration//GEN-END:variables

    class TimerListener implements ActionListener {
         DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        
        DateFormat timeFormat = new SimpleDateFormat("hh:mm:ss a");
        String today;
        public TimerListener() {
        }

     
		public void actionPerformed(ActionEvent arg0) {
                Date date = new Date();
                Date timeToday = new Date();

                 today = formatter.format(date);
                 oDateInput.setText(today);
                  System.out.println("Today : " + today);
                
                 String time = timeFormat.format(timeToday);
                 //System.out.println("Today : " + time);
                  oTimeInput.setText(time);
			//timer.stop();
		}
    }
    
    
    @Override
    public void actionPerformed(ActionEvent evt) {
        if(evt.getSource() == homeButton)
		{
			System.out.print("s");
			try {
                            HomeView home = new HomeView();
                            home.setVisible(true);
                            this.setVisible(false);                            
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
		}
        if(evt.getSource() == viewClientProf3)
		{
			System.out.print("s");
			try {
				clientSummary client_sum = new clientSummary();
                                //client_sum.jPanel3.setVisible(true);
                                //client_sum.jTabbedPane1.setVisible(true);
				client_sum.setVisible(true);
				this.setVisible(false);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
			
		
		}
              if(evt.getSource() == addClient3)
		{
			System.out.print("s");
			try {
				GUIcs192 add_client = new GUIcs192();
				add_client.setVisible(true);
				this.setVisible(false);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
			
		
		}
            if(evt.getSource() == addEmployee3)
		{
			System.out.print("s");
			try {
				AddEmployee add_employ = new AddEmployee();
				add_employ.setVisible(true);
				this.setVisible(false);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
			
		
		}
            if(evt.getSource() == genReport3)
		{
			System.out.print("s");
			try {
				GenReport gen_report = new GenReport();
				gen_report.setVisible(true);
				this.setVisible(false);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
			
		
		}
           
            if(evt.getSource() == viewEmployee3)
		{
			System.out.print("s");
			try {
				EmployeeProfile employ_prof = new EmployeeProfile();
				employ_prof.setVisible(true);
				this.setVisible(false);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
			
		
		}
            if(evt.getSource() == modifyE3)
            {
                try {
				modifyEmployee mod_employ = new modifyEmployee();
				mod_employ.setVisible(true);
				this.setVisible(false);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
            }
            
            
           //END OF CHANGE FRAME BUTTONS
            //when cancel button clicked
            
            if(evt.getSource() == jButton6)
		{
			System.out.print(":)))))))");
			try {
				GUIcs192 add_client = new GUIcs192();
				add_client.setVisible(true);
				this.setVisible(false);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
			
		
		}
            
            
            //START OF DATABASE STORAGE BUTTONS 
            Statement st = null;
            PreparedStatement pst = null;
            PreparedStatement ost = null;
            PreparedStatement gst = null;
            PreparedStatement ord_serv = null;
            PreparedStatement ord_ctr = null;
            PreparedStatement serv_choice = null;
            PreparedStatement therapist_choice = null;
            ResultSet rs = null;
            ResultSet gs = null;
            ResultSet orderSet = null;
            ResultSet servSet = null;
            ResultSet therapistChoice = null;
            ResultSet serviceChoice = null;
            int clientCtr=0;
            int orderCtr=0;
            int serv_num = 0;
            int employ_num;

            Connection con = null;
            String nameInput;
            String sexInput;
            String ageInput;
            String addressInput;
            String bdayInput;
            String contactInput1;
            String contactInput2;
            String occupationInput = null;
            String dateInput=null;
            String timeInput=null;
            
            int doesExist = 0;
            String numberOfExistClient = "";
            int clientExistNumber=0;
            
            String selectedTherapist;
            String selectedService;
            String url = "jdbc:mysql://localhost:3306/firstnoel?allowMultiQueries=true";
                            String user = "lian";
                            String password = "lian";
            if(evt.getSource()==saveClient)
            {
                nameInput = cNameInput.getText();
                sexInput = cSexInput.getText();
                bdayInput = cBdayInput.getText();
                occupationInput = cOccupationInput.getText();
                contactInput1 = cContactInput1.getText();
                contactInput2 = cContactInput2.getText();
                addressInput = cAddressInput1.getText() + cAddressInput2.getText();
                dateInput = oDateInput.getText();
                timeInput = oTimeInput.getText();
               JFrame frame = new JFrame();
               
//               
//               String pattern = "[a-zA-Z ]*";
//                if(!nameInput.matches(pattern)){
//                    JOptionPane.showMessageDialog(frame, "Invalid name input!");
//                    System.out.close();
//                }else{
                
                    try {
                        if(clientExist.getText().equals("New Client"))
                            {
                        if((nameInput.equals("")||nameInput.equals("Enter Name")) 
                                || (dateInput.equals("")||dateInput.equals("YYYY-MM-DD"))
                                || (timeInput.equals("")||timeInput.equals("HH:MM"))
                                || (occupationInput.equals(""))
                                || (contactInput1.equals(""))
            //                     || (contactInput2.equals(""))
                                || (sexInput.equals(""))
                                || (addressInput.equals(""))
                                || (bdayInput.equals("YYYY-MM-DD")))
                        {
    //                                JFrame frame = new JFrame();
                                    JOptionPane.showMessageDialog(frame, "Please fill in all the missing fields.");
                        }else{          
                            if(!(sexInput.matches("[m]") || sexInput.matches("[M]") || sexInput.matches("[F]") || sexInput.matches("[f]"))){
                                JOptionPane.showMessageDialog(frame, "Invalid input!");
                                System.out.close();
                            }else{
                                    try {  
                                        con = (Connection) DriverManager.getConnection(url, user, password);
                                        st = (Statement) con.createStatement();
                                                rs = st.executeQuery("SELECT VERSION()");

                                                if (rs.next()) {
                                                    System.out.println(rs.getString(1));
                                                }
                                                System.out.println("CHECKING");

                                    }catch (SQLException ex) {
                                        Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                                        lgr.log(Level.SEVERE, ex.getMessage(), ex);

                                    }finally {
                                        try {
                                            if (rs != null) {
                                                rs.close();
                                            }
                                            if (st != null) {
                                                st.close();
                                            }
                                            if (con != null) {
                                                con.close();
                                            }

                                        }catch (SQLException ex) {
                                            Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                                            lgr.log(Level.WARNING, ex.getMessage(), ex);
                                        }
                                }

                                        nameInput = cNameInput.getText();
                                        sexInput = cSexInput.getText();
                                        bdayInput = cBdayInput.getText();
                                        occupationInput = cOccupationInput.getText();
                                        contactInput1 = cContactInput1.getText();
                                        contactInput2 = cContactInput2.getText();
                                        addressInput = cAddressInput1.getText() + cAddressInput2.getText();
                                        dateInput = oDateInput.getText();
                                        timeInput = oTimeInput.getText();

                                        System.out.println("test");

                                    try{ 
                                        con = (Connection) DriverManager.getConnection(url, user, password); 
                                        con.setAutoCommit(false);

                                        pst = (PreparedStatement) con.prepareStatement("INSERT INTO client(c_name,c_gender,c_birthday, c_occupation, c_contactNumber1, c_contactNumber2,c_address) VALUES(?,?,?,?,?,?,?)");   
                                        pst.setString(1,nameInput);
                                        pst.setString(2,sexInput);
                                        pst.setString(3,bdayInput);
                                        pst.setString(4,occupationInput);
                                        pst.setString(5,contactInput1);
                                        pst.setString(6,contactInput2);
                                    // pst.setString(4,bdayInput);
                                        pst.setString(7,addressInput);
                                        pst.executeUpdate();

                                        JOptionPane.showMessageDialog(frame, "Client's information saved!");
                                        //-------------------------------//
                                        gst= (PreparedStatement) con.prepareStatement("SELECT * FROM client");
                                        gs = gst.executeQuery();
                                        clientCtr = 1;//BINIBILANG LNG KUNG PANG ILANG CLIENT NA SIYA
                                        while (gs.next()) {
                                            clientCtr=gs.getInt(1);
                                            //System.out.print(gs.getInt(1));
                                            //System.out.print(": ");
                                            //System.out.println(gs.getString(2));
                                            //nameOfTherapist[rs.getInt(1)-1] = rs.getString(2);
                                            //jComboBox1.addItem(rs.getString(2));
                                        }
                                        //-------------------------------//
                                        ost = (PreparedStatement) con.prepareStatement("INSERT INTO clientOrder(o_date,o_time,clientID) VALUE(?,?,?)");
                                        ost.setString(1,dateInput);
                                        ost.setString(2,timeInput);
                                        ost.setInt(3, clientCtr);
                                        ost.executeUpdate();
                                        //-------------------------------//
                                        ord_serv = (PreparedStatement) con.prepareStatement("INSERT INTO orderservice(OrderNum,ServiceNum,EmployNum) VALUE(?,?,?)");
                                        selectedTherapist = jComboBox1.getSelectedItem().toString();
                                        selectedService = dropDownService.getSelectedItem().toString();

                                        ord_ctr= (PreparedStatement) con.prepareStatement("SELECT * FROM clientorder");
                                        orderSet = ord_ctr.executeQuery();
                                        orderCtr = 1;//BINIBILANG LNG KUNG PANG ILANG ORDER NA
                                        while (orderSet.next())
                                        {
                                            orderCtr=orderSet.getInt(1);
                                            System.out.print(orderSet.getInt(1));
                                            System.out.print(": ");
                                            System.out.println(orderSet.getString(2));
                                        }
                                        System.out.println("LOL!!::::: "+orderCtr);
                                        ord_serv.setInt(1,orderCtr);

                                        String query1 = "SELECT s_number FROM service WHERE service.s_name=?";
                                        serv_choice = (PreparedStatement) con.prepareStatement(query1);
                                        serv_choice.setString(1,selectedService);
                                        serviceChoice = serv_choice.executeQuery();
                                        System.out.println(selectedService);
                                        serviceChoice.next();
                                        serv_num = serviceChoice.getInt(1);
                                        System.out.println(serv_num);


                                        ord_serv.setInt(2,serv_num);

                                        String query2 = "SELECT e_number FROM employee WHERE employee.e_name=?";
                                        therapist_choice = (PreparedStatement) con.prepareStatement(query2);
                                        therapist_choice.setString(1,selectedTherapist);
                                        therapistChoice = therapist_choice.executeQuery();
                                        therapistChoice.next();
                                        employ_num = therapistChoice.getInt(1);
                                        System.out.println(selectedTherapist);
                                        System.out.println(employ_num);
                                        ord_serv.setInt(3,employ_num);

                                        ord_serv.executeUpdate();







                                        System.out.println("d2 ba nagkamali?");
                                        con.commit();

                                    } catch (SQLException ex) {
                                        System.out.println("something's wrong");

                                        if (con != null) {
                                            try {
                                                con.rollback();
                                            } catch (SQLException ex1) {
                                                Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                                                lgr.log(Level.WARNING, ex1.getMessage(), ex1);
                                            }

                                        }
                                        Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                                        lgr.log(Level.SEVERE, ex.getMessage(), ex);

                                    } finally {

                                        try {
                                            if (pst != null) {
                                                pst.close();
                                            }
                                            if (con != null) {
                                                con.close();
                                            }

                                        } catch (SQLException ex) {
                                        Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                                        lgr.log(Level.SEVERE, ex.getMessage(), ex);
                                        }
                                    }
                                }
                               }
                            }
                                else if(clientExist.getText().equals("Existing Client"))
                                {

                                        dateInput = oDateInput.getText();
                                        timeInput = oTimeInput.getText();
                                        clientExistNumber = Integer.parseInt(IDClient.getText());
                                        con = (Connection) DriverManager.getConnection(url, user, password);
                                        ost = (PreparedStatement) con.prepareStatement("INSERT INTO clientOrder(o_date,o_time,clientID) VALUE(?,?,?)");
                                        ost.setString(1,dateInput);
                                        ost.setString(2,timeInput);
                                        ost.setInt(3, clientExistNumber);
                                        ost.executeUpdate();
                                        //-------------------------------//
                                        ord_serv = (PreparedStatement) con.prepareStatement("INSERT INTO orderservice(OrderNum,ServiceNum,EmployNum) VALUE(?,?,?)");
                                        selectedTherapist = jComboBox1.getSelectedItem().toString();
                                        selectedService = dropDownService.getSelectedItem().toString();

                                        ord_ctr= (PreparedStatement) con.prepareStatement("SELECT * FROM clientorder");
                                        orderSet = ord_ctr.executeQuery();
                                        orderCtr = 1;//BINIBILANG LNG KUNG PANG ILANG ORDER NA
                                        while (orderSet.next())
                                        {
                                            orderCtr=orderSet.getInt(1);
                                            System.out.print(orderSet.getInt(1));
                                            System.out.print(": ");
                                            System.out.println(orderSet.getString(2));
                                        }
                                        System.out.println("LOL!!::::: "+orderCtr);
                                        ord_serv.setInt(1,orderCtr);

                                        String query1 = "SELECT s_number FROM service WHERE service.s_name=?";
                                        serv_choice = (PreparedStatement) con.prepareStatement(query1);
                                        serv_choice.setString(1,selectedService);
                                        serviceChoice = serv_choice.executeQuery();
                                        System.out.println(selectedService);
                                        serviceChoice.next();
                                        serv_num = serviceChoice.getInt(1);
                                        System.out.println(serv_num);


                                        ord_serv.setInt(2,serv_num);

                                        String query2 = "SELECT e_number FROM employee WHERE employee.e_name=?";
                                        therapist_choice = (PreparedStatement) con.prepareStatement(query2);
                                        therapist_choice.setString(1,selectedTherapist);
                                        therapistChoice = therapist_choice.executeQuery();
                                        therapistChoice.next();
                                        employ_num = therapistChoice.getInt(1);
                                        System.out.println(selectedTherapist);
                                        System.out.println(employ_num);
                                        ord_serv.setInt(3,employ_num);

                                        ord_serv.executeUpdate();
                                        
                                        JOptionPane.showMessageDialog(frame, "Client's information saved!");
                                        System.out.println("d2 ba nagkamali?");
                                        //con.commit();
                                }
                            } catch (Exception e1) {
                                    // TODO Auto-generated catch block
                                    System.out.println("TEST");
                                    e1.printStackTrace();
                            }
//                }
            
            }
            //DI KO MAPAGANA NA DALAWA UNG NAG UUPDATE!!!    
            
            /*if(evt.getSource() == jComboBox1)
            {
                //PreparedStatement therapist_choice = null;
                PreparedStatement getKnownService = null;
                ResultSet knowServiceSet = null;
                // ResultSet therapistChoice = null;
                 int knowServiceNum;
                try {

                    con = (Connection) DriverManager.getConnection(url, user, password);

                    selectedTherapist = jComboBox1.getSelectedItem().toString();
                    //int employ_num;
                    String query2 = "SELECT * FROM employee WHERE employee.e_name=?";

                    therapist_choice = (PreparedStatement) con.prepareStatement(query2);
                    therapist_choice.setString(1,selectedTherapist);
                    therapistChoice = therapist_choice.executeQuery();
                    therapistChoice.next();
                    employ_num = therapistChoice.getInt(1);

                    String query3 = "Select ServiceNum FROM employeeservice WHERE EmployNum=?";
                    getKnownService = (PreparedStatement) con.prepareStatement(query3);
                    getKnownService.setInt(1,employ_num);
                    knowServiceSet = getKnownService.executeQuery();
                    dropDownService.removeAllItems();
                    dropDownService.addItem("Choose Service");

                    while(knowServiceSet.next())
                    {
                        knowServiceNum = knowServiceSet.getInt(1);
                        pst = (PreparedStatement) con.prepareStatement("SELECT * FROM service WHERE service.s_number=? ");
                        pst.setInt(1,knowServiceNum); 
                        rs = pst.executeQuery();

                        while (rs.next()) 
                        {
                            System.out.print(rs.getInt(1));
                            System.out.print(": ");
                            System.out.println(rs.getString(2));
                            //nameOfTherapist[rs.getInt(1)-1] = rs.getString(2);
                            dropDownService.addItem(rs.getString(2));
                            //jPanel3.revalidate();
                        }




                    }   

                } catch (SQLException ex) {
                Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                lgr.log(Level.SEVERE, ex.getMessage(), ex);

                } finally {

                    try {
                        if (rs != null) {
                            rs.close();
                        }
                        if (pst != null) {
                            pst.close();
                        }
                        if (con != null) {
                            con.close();
                        }

                    } catch (SQLException ex) {
                        Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                        lgr.log(Level.WARNING, ex.getMessage(), ex);
                    }
                }
                
            }*/
            
             if(evt.getSource() == dropDownService)
            {
                //PreparedStatement therapist_choice = null;
                PreparedStatement getKnownTherapist = null;
                ResultSet knowTherapistSet = null;
                // ResultSet therapistChoice = null;
                 int knowTherapistNum;
                 //int serv_num;
                try {

                    con = (Connection) DriverManager.getConnection(url, user, password);

                    selectedService= dropDownService.getSelectedItem().toString();
                    //int employ_num;
                    String query2 = "SELECT * FROM service WHERE service.s_name=?";

                    serv_choice = (PreparedStatement) con.prepareStatement(query2);
                    serv_choice.setString(1,selectedService);
                    serviceChoice = serv_choice.executeQuery();
                    serviceChoice.next();
                    serv_num = serviceChoice.getInt(1);

                    String query3 = "SELECT EmployNum FROM employeeservice WHERE ServiceNum=?";
                    getKnownTherapist = (PreparedStatement) con.prepareStatement(query3);
                    getKnownTherapist.setInt(1,serv_num);
                    knowTherapistSet = getKnownTherapist.executeQuery();
                    jComboBox1.removeAllItems();
                    jComboBox1.addItem("Choose Therapist");

                    while(knowTherapistSet.next())
                    {
                        knowTherapistNum = knowTherapistSet.getInt(1);
                        pst = (PreparedStatement) con.prepareStatement("SELECT * FROM employee WHERE employee.e_number=? AND employee.e_status=1 ");
                        pst.setInt(1,knowTherapistNum); 
                        rs = pst.executeQuery();

                        while (rs.next()) 
                        {
                            System.out.print(rs.getInt(1));
                            System.out.print(": ");
                            System.out.println(rs.getString(2));
                            //nameOfTherapist[rs.getInt(1)-1] = rs.getString(2);
                            jComboBox1.addItem(rs.getString(2));
                            //jPanel3.revalidate();
                        }
                    }   
                } catch (SQLException ex) {
                Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                lgr.log(Level.SEVERE, ex.getMessage(), ex);

                } finally {

                    try {
                        if (rs != null) {
                            rs.close();
                        }
                        if (pst != null) {
                            pst.close();
                        }
                        if (con != null) {
                            con.close();
                        }

                    } catch (SQLException ex) {
                        Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                        lgr.log(Level.WARNING, ex.getMessage(), ex);
                    }
                }
                
            }
             if(evt.getSource() == isClientExist)
             {
                 PreparedStatement searchClient = null;
                 ResultSet searchSet = null;
                 String pickedName;
                
                 
                 
                    try {

                    con = (Connection) DriverManager.getConnection(url, user, password);
                   
                    pickedName = cNameInput.getText();
                     System.out.println(pickedName);
                    //int employ_num;
                    String searchQuery = "SELECT * FROM client WHERE c_name=?";

                    searchClient = (PreparedStatement) con.prepareStatement(searchQuery);
                    searchClient.setString(1,pickedName);
                    searchSet = searchClient.executeQuery();
                    
                    
                    if(searchSet.next()==false)
                    {
                        JOptionPane.showMessageDialog(null, "New Client!");
                        System.out.println("WALA DAW");
                        clientExist.setText("New Client");
                        doesExist = 0;
                        validate();
                        repaint();
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Existing Client!");
                        System.out.println("MERON");
                        clientExist.setText("Existing Client");
                        doesExist = 1;
                        numberOfExistClient = Integer.toString(searchSet.getInt(1));
                        IDClient.setText(numberOfExistClient);
                        cSexInput.setText(searchSet.getString(3));
                        cBdayInput.setText(searchSet.getString(4));
                        cOccupationInput.setText(searchSet.getString(5));
                        cContactInput1.setText(searchSet.getString(6));
                        cContactInput2.setText(searchSet.getString(7));
                        cAddressInput1.setText(searchSet.getString(8));
                        //cAddressInput2.setText(searchSet.getString(8).substring(41, 75));
                        
                        validate();
                        repaint();
                    }

                } catch (SQLException ex) {
                Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                lgr.log(Level.SEVERE, ex.getMessage(), ex);

                } finally {

                    try {
                        if (rs != null) {
                            rs.close();
                        }
                        if (pst != null) {
                            pst.close();
                        }
                        if (con != null) {
                            con.close();
                        }

                    } catch (SQLException ex) {
                        Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                        lgr.log(Level.WARNING, ex.getMessage(), ex);
                    }
                }
                 
                         
             }
            
    }
   
    
   
   /*class TimerListener implements ActionListener {

        public TimerListener() {
        }
        DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
        
        DateFormat timeFormat = new SimpleDateFormat("hh:mm:ss a");
		public void actionPerformed(ActionEvent arg0) {
                Date date = new Date();
                Date timeToday = new Date();

                 String today = formatter.format(date);
                 oDateInput.setText(today);
                  System.out.println("Today : " + today);
                
                 String time = timeFormat.format(timeToday);
                 System.out.println("Today : " + time);
                  oTimeInput.setText(time);
			//timer.stop();
		}
    }*/
   
    
}
