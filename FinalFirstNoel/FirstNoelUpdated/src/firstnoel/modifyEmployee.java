/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package firstnoel;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author JulianFabic
 */
public class modifyEmployee extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form modifyEmployee
     */
    public modifyEmployee() {
        initComponents();
         nameTherapist.addActionListener((ActionListener)this);
         saveModification.addActionListener((ActionListener)this);
         addClient.addActionListener((ActionListener)this);
        addEmployee.addActionListener((ActionListener)this);
        genReport.addActionListener((ActionListener)this);
        viewClientProf.addActionListener((ActionListener)this);
        viewEmployee.addActionListener((ActionListener)this);
        modifyE.addActionListener((ActionListener)this);
        homeButton.addActionListener((ActionListener)this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        viewClientProf = new javax.swing.JButton();
        addClient = new javax.swing.JButton();
        viewEmployee = new javax.swing.JButton();
        addEmployee = new javax.swing.JButton();
        genReport = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        modifyE = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        nameTherapist = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        dropDownService = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        currentStatus = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        changeStatus = new javax.swing.JComboBox();
        dropDownService1 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        saveModification = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        homeButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setLayout(null);

        viewClientProf.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        viewClientProf.setText("View Client Profile");
        jPanel2.add(viewClientProf);
        viewClientProf.setBounds(10, 190, 160, 30);

        addClient.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        addClient.setText("Add Client");
        jPanel2.add(addClient);
        addClient.setBounds(10, 240, 160, 30);

        viewEmployee.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        viewEmployee.setText("View Employee Profile");
        jPanel2.add(viewEmployee);
        viewEmployee.setBounds(10, 290, 160, 30);

        addEmployee.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        addEmployee.setText("Add Employee");
        jPanel2.add(addEmployee);
        addEmployee.setBounds(10, 360, 160, 30);

        genReport.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        genReport.setText("Generate Report");
        jPanel2.add(genReport);
        genReport.setBounds(10, 460, 160, 30);

        jLabel5.setFont(new java.awt.Font("Serif", 1, 12)); // NOI18N
        jLabel5.setText("EMPLOYEE");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(10, 330, 150, 20);

        modifyE.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        modifyE.setText("Modify");
        jPanel2.add(modifyE);
        modifyE.setBounds(10, 410, 160, 30);

        Connection con = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        //String nameOfTherapist[]=null;

        String url = "jdbc:mysql://localhost:3306/firstnoel?AllowMultipleQueries=true";
        String user = "lian";
        String password = "lian";

        try {

            con = (Connection) DriverManager.getConnection(url, user, password);
            pst = (PreparedStatement) con.prepareStatement("SELECT * FROM employee");
            rs = pst.executeQuery();
            nameTherapist.addItem("Choose Therapist");
            while (rs.next()) {
                System.out.print(rs.getInt(1));
                System.out.print(": ");
                System.out.println(rs.getString(2));
                //nameOfTherapist[rs.getInt(1)-1] = rs.getString(2);
                nameTherapist.addItem(rs.getString(2));
            }

        } catch (SQLException ex) {
            Logger lgr = Logger.getLogger(AddEmployee.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);

        } finally {

            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (con != null) {
                    con.close();
                }

            } catch (SQLException ex) {
                Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                lgr.log(Level.WARNING, ex.getMessage(), ex);
            }
        }

        jLabel13.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        jLabel13.setText("Known Services:");

        jLabel12.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        jLabel12.setText("Name of Therapist:");

        /*PreparedStatement therapist_choice = null;
        PreparedStatement getKnownService = null;
        ResultSet knowServiceSet = null;
        ResultSet therapistChoice = null;
        int knowServiceNum;

        /*Connection con = null;

        ResultSet rs = null;
        //String nameOfTherapist[]=null;

        String url = "jdbc:mysql://localhost:3306/firstnoel?AllowMultipleQueries=true";
        String user = "lian";
        String password = "lian";*/

        /*
        try {

            con = (Connection) DriverManager.getConnection(url, user, password);

            String selectedTherapist = nameTherapist.getSelectedItem().toString();
            int employ_num;
            String query2 = "SELECT * FROM employee WHERE employee.e_name=?";

            //therapist_choice = (PreparedStatement) con.prepareStatement(query2);
            //therapist_choice.setString(1,selectedTherapist);
            //therapistChoice = therapist_choice.executeQuery();
            //therapistChoice.next();
            //employ_num = therapistChoice.getInt(1);

            /*String query3 = "Select ServiceNum FROM employeeservice WHERE EmployNum=?";
            getKnownService = (PreparedStatement) con.prepareStatement(query3);
            getKnownService.setInt(1,employ_num);
            knowServiceSet = getKnownService.executeQuery();
            dropDownService.addItem("Choose Service");
            */
            //while(knowServiceSet.next())
            //{
                //knowServiceNum = knowServiceSet.getInt(1);
                //  pst = (PreparedStatement) con.prepareStatement("SELECT * FROM service WHERE service.s_number=? ");
                //pst.setInt(1,knowServiceNum);
                /*                pst = (PreparedStatement) con.prepareStatement("SELECT * FROM service");
                rs = pst.executeQuery();

                while (rs.next())
                {
                    System.out.print(rs.getInt(1));
                    System.out.print(": ");
                    System.out.println(rs.getString(2));
                    //nameOfTherapist[rs.getInt(1)-1] = rs.getString(2);
                    dropDownService.addItem(rs.getString(2));
                }

                //}

        } catch (SQLException ex) {
            Logger lgr = Logger.getLogger(AddEmployee.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);

        } finally {

            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (con != null) {
                    con.close();
                }

            } catch (SQLException ex) {
                Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                lgr.log(Level.WARNING, ex.getMessage(), ex);
            }
        }
        dropDownService.removeAll();
        dropDownService.revalidate();*/

        jLabel2.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        jLabel2.setText("Current Status:");

        currentStatus.setText("-");

        jLabel3.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        jLabel3.setText("Change Status:");

        changeStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CHANGE STATUS", "ACTIVE", "INACTIVE" }));

        PreparedStatement therapist_choice = null;
        PreparedStatement getKnownService = null;
        ResultSet knowServiceSet = null;
        ResultSet therapistChoice = null;
        int knowServiceNum;

        /*Connection con = null;

        ResultSet rs = null;
        //String nameOfTherapist[]=null;

        String url = "jdbc:mysql://localhost:3306/firstnoel?AllowMultipleQueries=true";
        String user = "lian";
        String password = "lian";*/

        try {

            con = (Connection) DriverManager.getConnection(url, user, password);

            String selectedTherapist = nameTherapist.getSelectedItem().toString();
            int employ_num;
            String query2 = "SELECT * FROM employee WHERE employee.e_name=?";

            //therapist_choice = (PreparedStatement) con.prepareStatement(query2);
            //therapist_choice.setString(1,selectedTherapist);
            //therapistChoice = therapist_choice.executeQuery();
            //therapistChoice.next();
            //employ_num = therapistChoice.getInt(1);

            /*String query3 = "Select ServiceNum FROM employeeservice WHERE EmployNum=?";
            getKnownService = (PreparedStatement) con.prepareStatement(query3);
            getKnownService.setInt(1,employ_num);
            knowServiceSet = getKnownService.executeQuery();
            dropDownService.addItem("Choose Service");
            */
            //while(knowServiceSet.next())
            //{
                //knowServiceNum = knowServiceSet.getInt(1);
                //  pst = (PreparedStatement) con.prepareStatement("SELECT * FROM service WHERE service.s_number=? ");
                //pst.setInt(1,knowServiceNum);
                pst = (PreparedStatement) con.prepareStatement("SELECT * FROM service");
                rs = pst.executeQuery();
                dropDownService1.addItem("Choose Service to ADD");
                while (rs.next())
                {
                    System.out.print(rs.getInt(1));
                    System.out.print(": ");
                    System.out.println(rs.getString(2));
                    //nameOfTherapist[rs.getInt(1)-1] = rs.getString(2);
                    dropDownService1.addItem(rs.getString(2));
                }

                //}

        } catch (SQLException ex) {
            Logger lgr = Logger.getLogger(AddEmployee.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);

        } finally {

            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (con != null) {
                    con.close();
                }

            } catch (SQLException ex) {
                Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                lgr.log(Level.WARNING, ex.getMessage(), ex);
            }
        }
        dropDownService.removeAll();
        dropDownService.revalidate();

        jLabel4.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        jLabel4.setText("Add Services:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nameTherapist, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(currentStatus))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(changeStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(31, 31, 31)
                        .addComponent(dropDownService1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dropDownService, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(nameTherapist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(currentStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(changeStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(dropDownService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dropDownService1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel3);
        jPanel3.setBounds(220, 190, 460, 220);

        saveModification.setFont(new java.awt.Font("Goudy Old Style", 1, 16)); // NOI18N
        saveModification.setText("Save");
        jPanel2.add(saveModification);
        saveModification.setBounds(510, 470, 70, 29);

        jLabel1.setFont(new java.awt.Font("Perpetua Titling MT", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("FIRST NOEL CORPORATION");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(10, 60, 530, 50);

        homeButton.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        homeButton.setText("Home");
        jPanel2.add(homeButton);
        homeButton.setBounds(10, 140, 160, 30);

        jLabel7.setFont(new java.awt.Font("Imprint MT Shadow", 0, 24)); // NOI18N
        jLabel7.setText("MODIFY EMPLOYEE");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(220, 140, 290, 30);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bg3.png"))); // NOI18N
        jLabel6.setMaximumSize(new java.awt.Dimension(829, 630));
        jLabel6.setMinimumSize(new java.awt.Dimension(829, 630));
        jPanel2.add(jLabel6);
        jLabel6.setBounds(0, 0, 790, 630);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 790, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(modifyEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(modifyEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(modifyEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(modifyEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new modifyEmployee().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addClient;
    private javax.swing.JButton addEmployee;
    private javax.swing.JComboBox changeStatus;
    private javax.swing.JLabel currentStatus;
    public javax.swing.JComboBox dropDownService;
    public javax.swing.JComboBox dropDownService1;
    private javax.swing.JButton genReport;
    private javax.swing.JButton homeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton modifyE;
    public javax.swing.JComboBox nameTherapist;
    private javax.swing.JButton saveModification;
    private javax.swing.JButton viewClientProf;
    private javax.swing.JButton viewEmployee;
    // End of variables declaration//GEN-END:variables

    @Override
   public void actionPerformed(ActionEvent e) {
        
        
        if(e.getSource() == viewClientProf)
		{
			System.out.print("s");
			try {
				clientSummary client_sum = new clientSummary();
                                //client_sum.jPanel3.setVisible(true);
                                //client_sum.jTabbedPane1.setVisible(true);
				client_sum.setVisible(true);
				this.setVisible(false);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
			
		
		}
        if(e.getSource() == homeButton)
		{
			System.out.print("s");
			try {
                            HomeView home = new HomeView();
                            home.setVisible(true);
                            this.setVisible(false);                            
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
		}
              if(e.getSource() == addClient)
		{
			System.out.print("s");
			try {
				GUIcs192 add_client = new GUIcs192();
				add_client.setVisible(true);
				this.setVisible(false);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
			
		
		}
            if(e.getSource() == addEmployee)
		{
			System.out.print("s");
			try {
				AddEmployee add_employ = new AddEmployee();
				add_employ.setVisible(true);
				this.setVisible(false);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
			
		
		}
            if(e.getSource() == genReport)
		{
			System.out.print("s");
			try {
				GenReport gen_report = new GenReport();
				gen_report.setVisible(true);
				this.setVisible(false);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
			
		
		}
           
            if(e.getSource() == viewEmployee)
		{
			System.out.print("s");
			try {
				EmployeeProfile employ_prof = new EmployeeProfile();
				employ_prof.setVisible(true);
				this.setVisible(false);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
			
		
		}
            if(e.getSource() == modifyE)
            {
                try {
				modifyEmployee mod_employ = new modifyEmployee();
				mod_employ.setVisible(true);
				this.setVisible(false);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
            }
            
        Connection con = null;
       
        PreparedStatement pst = null;
        ResultSet rs = null;
        
        PreparedStatement getStatus = null;
        ResultSet statusSet = null;
        
        PreparedStatement setStatus = null;
        PreparedStatement serv_choice;
        
        PreparedStatement setNewService;
        ResultSet serviceChoice;
        
        PreparedStatement therapist_choice;
        ResultSet therapistChoice;
        
        int serv_num;        
        int employ_num = 0;
        int employ_status;
        
        String status = null;
        String new_status = null;
        String selectedTherapist;
  
        
         String url = "jdbc:mysql://localhost:3306/firstnoel?allowMultiQueries=true";
         String user = "lian";
         String password = "lian";
        //WHEN THERAPIST DROPDOWN IS CLICKED    
        if(e.getSource() == nameTherapist)
            {
                //PreparedStatement therapist_choice = null;
                PreparedStatement getKnownService = null;
                ResultSet knowServiceSet = null;
                // ResultSet therapistChoice = null;
                 int knowServiceNum;
                try {

                    con = (Connection) DriverManager.getConnection(url, user, password);

                    selectedTherapist = nameTherapist.getSelectedItem().toString();

                    pst = (PreparedStatement) con.prepareStatement("SELECT * FROM service");
                    rs = pst.executeQuery();
                    dropDownService1.removeAllItems();
                    dropDownService1.addItem("Choose Service to ADD"); 
                    while (rs.next()) 
                    {
                        System.out.print(rs.getInt(1));
                        System.out.print(": ");
                        System.out.println(rs.getString(2));
                        //nameOfTherapist[rs.getInt(1)-1] = rs.getString(2);
                        dropDownService1.addItem(rs.getString(2));
                    }
                
                
                    //int employ_num;
                    String query2 = "SELECT * FROM employee WHERE employee.e_name=?";

                    therapist_choice = (PreparedStatement) con.prepareStatement(query2);
                    therapist_choice.setString(1,selectedTherapist);
                    therapistChoice = therapist_choice.executeQuery();
                    if(therapistChoice.next())
                    {
                               employ_num = therapistChoice.getInt(1);
                            employ_status = therapistChoice.getInt(3);
                            if(employ_status==0)
                            {
                                status = "INACTIVE";
                                changeStatus.removeAllItems();
                                changeStatus.addItem(status);
                                changeStatus.addItem("ACTIVE");
                            }
                            else if (employ_status==1)
                            {
                                status="ACTIVE";
                                changeStatus.removeAllItems();
                                changeStatus.addItem(status);
                                changeStatus.addItem("INACTIVE");
                            }
                            currentStatus.setText(status);

                            String query3 = "Select ServiceNum FROM employeeservice WHERE EmployNum=?";
                            getKnownService = (PreparedStatement) con.prepareStatement(query3);
                            getKnownService.setInt(1,employ_num);
                            knowServiceSet = getKnownService.executeQuery();
                            dropDownService.removeAllItems();
                            dropDownService.addItem("Services the Therapist already know");

                            while(knowServiceSet.next())
                            {
                                knowServiceNum = knowServiceSet.getInt(1);
                                pst = (PreparedStatement) con.prepareStatement("SELECT * FROM service WHERE service.s_number=? ");
                                pst.setInt(1,knowServiceNum); 
                                rs = pst.executeQuery();

                                while (rs.next()) 
                                {
                                    System.out.print(rs.getInt(1));
                                    System.out.print(": ");
                                    System.out.println(rs.getString(2));
                                    //nameOfTherapist[rs.getInt(1)-1] = rs.getString(2);
                                    dropDownService.addItem(rs.getString(2));
                                    dropDownService1.removeItem(rs.getString(2));
                                    //jPanel3.revalidate();
                                }




                            } 
                    }
                    
                     
                    
                   
                    
                   /* String query4 = "";
                    getStatus = (PreparedStatement) con.prepareStatement(query4);*/

                } catch (SQLException ex) {
                Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                lgr.log(Level.SEVERE, ex.getMessage(), ex);

                } finally {

                    try {
                        if (rs != null) {
                            rs.close();
                        }
                        if (pst != null) {
                            pst.close();
                        }
                        if (con != null) {
                            con.close();
                        }

                    } catch (SQLException ex) {
                        Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                        lgr.log(Level.WARNING, ex.getMessage(), ex);
                    }
                }
                
            }
        
        //END OF THERAPIST DROPDOWN LISTENER
        //START OF SAVE MODIFICATION (STATUS CHANGE = DONE, ADD SERVICE TO THERAPIST = NOTDONE)
        if(e.getSource()==saveModification)
            {
            if((nameTherapist.getSelectedItem().equals("Choose Therapist"))){
                JFrame frame = new JFrame();
                JOptionPane.showMessageDialog(frame,"Please fill in all the missing fields.");
            }
            else{
                
                
            try {
                con = (Connection) DriverManager.getConnection(url, user, password);
                con.setAutoCommit(false);
                selectedTherapist = nameTherapist.getSelectedItem().toString();

                    String query2 = "SELECT * FROM employee WHERE employee.e_name=?";

                    therapist_choice = (PreparedStatement) con.prepareStatement(query2);
                    therapist_choice.setString(1,selectedTherapist);
                    therapistChoice = therapist_choice.executeQuery();
                    therapistChoice.next();
                    employ_num = therapistChoice.getInt(1);
                    employ_status = therapistChoice.getInt(3);
                  
                    
                    String query3 = "UPDATE employee SET e_status=? WHERE e_number=?";
                    new_status = changeStatus.getSelectedItem().toString();
                    if(new_status.equals("ACTIVE"))
                    {
                        employ_status = 1;
                        currentStatus.setText("ACTIVE");
                        validate();
                        repaint();
                        
                    }
                    else if(new_status.equals("INACTIVE"))
                    {
                        employ_status = 0;
                        currentStatus.setText("ACTIVE");
                        validate();
                        repaint();
                    }
                    setStatus = (PreparedStatement) con.prepareStatement(query3);
                    setStatus.setInt(1,employ_status);
                    setStatus.setInt(2,employ_num);
                    setStatus.executeUpdate();
                    System.out.println(employ_num);
                    System.out.println(employ_status);
                    
                    String selectedService= dropDownService1.getSelectedItem().toString();     
                    String query4 = "SELECT * FROM service WHERE service.s_name=?";               
                    serv_choice = (PreparedStatement) con.prepareStatement(query4);
                    serv_choice.setString(1,selectedService);
                    serviceChoice = serv_choice.executeQuery();
                    if(serviceChoice.next())
                    {
                         serv_num = serviceChoice.getInt(1);
                    
                    
                        String query5 = "INSERT INTO employeeservice(EmployNum,ServiceNum) VALUE(?,?)";
                        setNewService = (PreparedStatement) con.prepareStatement(query5);
                        setNewService.setInt(1,employ_num);
                        setNewService.setInt(2,serv_num);
                        setNewService.executeUpdate();
                    }
                       
                    con.commit();
                    
                    JOptionPane.showMessageDialog(null, "Modification saved!");
                    
                    dropDownService.addItem(selectedService);
                    dropDownService1.removeItem(selectedService);
                    
            } catch (SQLException ex) {
                Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                lgr.log(Level.SEVERE, ex.getMessage(), ex);

                } finally {

                    try {
                        if (rs != null) {
                            rs.close();
                        }
                        if (pst != null) {
                            pst.close();
                        }
                        if (con != null) {
                            con.close();
                        }

                    } catch (SQLException ex) {
                        Logger lgr = Logger.getLogger(AddEmployee.class.getName());
                        lgr.log(Level.WARNING, ex.getMessage(), ex);
                    }
                }

                    
            }
        
    }
}
}
