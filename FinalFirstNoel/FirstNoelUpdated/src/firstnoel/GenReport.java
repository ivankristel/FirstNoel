/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GenReport.java
 *
 * Created on Jan 20, 2012, 10:11:53 AM
 */
package firstnoel;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.Statement;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import jxl.Cell;
import jxl.Range;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import jxl.read.biff.PasswordException;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
//import 
//import java.awt.jfree.chart.*;


/**
 *
 * @author erol
 */
public class GenReport extends javax.swing.JFrame implements ActionListener {
    public String graphWith = null;
    /** Creates new form GenReport */
    public GenReport() {
        initComponents();
       addClient.addActionListener((ActionListener)this);
        addEmployee.addActionListener((ActionListener)this);
        genReport.addActionListener((ActionListener)this);
        viewClientProf.addActionListener((ActionListener)this);
        viewEmployee.addActionListener((ActionListener)this);
        modifyE.addActionListener((ActionListener)this);
        Age.addActionListener((ActionListener)this);
        Sex.addActionListener((ActionListener)this);
        Time.addActionListener((ActionListener)this);
        month.addActionListener((ActionListener)this);
        year.addActionListener((ActionListener)this);
        month1.addActionListener((ActionListener)this);
        year1.addActionListener((ActionListener)this);
        day.addActionListener((ActionListener)this);
        day1.addActionListener((ActionListener)this);
        homeButton.addActionListener((ActionListener)this);
        exportButton.addActionListener((ActionListener)this);
        ok.addActionListener((ActionListener)this);
        this.jLabel4.setVisible(false);
        this.jLabel5.setVisible(false);
        this.jLabel6.setVisible(false);
        this.jLabel7.setVisible(false);
        this.year.setVisible(false);
        this.year1.setVisible(false);
        this.month.setVisible(false);
        this.month1.setVisible(false);
        this.day.setVisible(false);
        this.day1.setVisible(false);
        exportButton.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        exportButton = new javax.swing.JButton();
        viewClientProf = new javax.swing.JButton();
        addClient = new javax.swing.JButton();
        viewEmployee = new javax.swing.JButton();
        addEmployee = new javax.swing.JButton();
        genReport = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        modifyE = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        Services = new javax.swing.JTabbedPane();
        Express = new javax.swing.JTabbedPane();
        MontAlbo = new javax.swing.JTabbedPane();
        Hilot = new javax.swing.JTabbedPane();
        Swedish = new javax.swing.JTabbedPane();
        ThaiShiatsu = new javax.swing.JTabbedPane();
        TuiNa = new javax.swing.JTabbedPane();
        AllServices = new javax.swing.JTabbedPane();
        jLabel1 = new javax.swing.JLabel();
        Time = new javax.swing.JButton();
        Age = new javax.swing.JButton();
        Sex = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        year = new javax.swing.JComboBox();
        month = new javax.swing.JComboBox();
        year1 = new javax.swing.JComboBox();
        month1 = new javax.swing.JComboBox();
        day1 = new javax.swing.JComboBox();
        day = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        ok = new javax.swing.JButton();
        homeButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setLayout(null);

        exportButton.setText("Export");
        jPanel2.add(exportButton);
        exportButton.setBounds(480, 590, 85, 29);

        viewClientProf.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        viewClientProf.setText("View Client Profile");
        jPanel2.add(viewClientProf);
        viewClientProf.setBounds(10, 190, 160, 30);

        addClient.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        addClient.setText("Add Client");
        jPanel2.add(addClient);
        addClient.setBounds(10, 240, 160, 30);

        viewEmployee.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        viewEmployee.setText("View Employee Profile");
        jPanel2.add(viewEmployee);
        viewEmployee.setBounds(10, 290, 160, 30);

        addEmployee.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        addEmployee.setText("Add Employee");
        jPanel2.add(addEmployee);
        addEmployee.setBounds(10, 360, 160, 30);

        genReport.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        genReport.setText("Generate Report");
        jPanel2.add(genReport);
        genReport.setBounds(10, 460, 160, 30);

        jLabel3.setFont(new java.awt.Font("Serif", 1, 12)); // NOI18N
        jLabel3.setText("EMPLOYEE");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(10, 330, 150, 20);

        modifyE.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        modifyE.setText("Modify");
        jPanel2.add(modifyE);
        modifyE.setBounds(10, 410, 160, 30);

        Services.addTab("Express", Express);
        Services.addTab("Mont Albo", MontAlbo);
        Services.addTab("Hilot", Hilot);
        Services.addTab("Swedish", Swedish);
        Services.addTab("Thai-Shiatsu", ThaiShiatsu);
        Services.addTab("Tui Na", TuiNa);
        Services.addTab("All Services", AllServices);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Services, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                .addGap(11, 11, 11))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(Services, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel3);
        jPanel3.setBounds(230, 180, 410, 270);

        jLabel1.setFont(new java.awt.Font("Perpetua Titling MT", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("FIRST NOEL CORPORATION");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(10, 60, 530, 50);

        Time.setFont(new java.awt.Font("Goudy Old Style", 1, 16)); // NOI18N
        Time.setText("Time");
        Time.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeActionPerformed(evt);
            }
        });
        jPanel2.add(Time);
        Time.setBounds(270, 480, 90, 30);

        Age.setFont(new java.awt.Font("Goudy Old Style", 1, 16)); // NOI18N
        Age.setText("Age");
        Age.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgeActionPerformed(evt);
            }
        });
        jPanel2.add(Age);
        Age.setBounds(390, 480, 90, 30);

        Sex.setFont(new java.awt.Font("Goudy Old Style", 1, 16)); // NOI18N
        Sex.setText("Sex");
        jPanel2.add(Sex);
        Sex.setBounds(510, 480, 90, 30);

        jLabel4.setText("Year");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(200, 530, 27, 16);

        jLabel6.setText("Month");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(350, 530, 45, 16);

        jLabel7.setText("Day");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(490, 530, 24, 16);

        year.addItem("Select Year");
        int range[] = new int[2];
        range[0] = this.databaseQuerying("SELECT MIN(YEAR(o_Date)) from ClientOrder","minmax");
        range[1] = this.databaseQuerying("SELECT MAX(YEAR(o_Date)) from ClientOrder","minmax");
        /**
        year.setModel(null);
        */
        for(int years = range[0];years<=range[1];years++){
            System.out.println(years);
            year.addItem(years);
        }
        jPanel2.add(year);
        year.setBounds(230, 520, 90, 27);

        month.addItem("Select Month");
        for(int x = 1; x<13 ; x++){
            month.addItem(x);
        }
        jPanel2.add(month);
        month.setBounds(390, 520, 90, 27);

        year1.addItem("Select Year");
        int range1[] = new int[2];
        range1[0] = this.databaseQuerying("SELECT MIN(YEAR(o_Date)) from ClientOrder","minmax");
        range1[1] = this.databaseQuerying("SELECT MAX(YEAR(o_Date)) from ClientOrder","minmax");
        /*
        year1.setModel(null);
        */
        for(int years = range1[0];years<=range1[1];years++){
            System.out.println(years);
            year1.addItem(years);
        }
        jPanel2.add(year1);
        year1.setBounds(230, 560, 90, 27);

        /**
        month1.setModel(null);
        */
        month1.addItem("Select Month");
        for(int x = 1; x<13 ; x++){
            month1.addItem(x);
        }
        jPanel2.add(month1);
        month1.setBounds(390, 560, 90, 27);

        /**
        day1.setModel(null);
        */day1.addItem("Select Day");
        jPanel2.add(day1);
        day1.setBounds(530, 560, 90, 27);

        /**
        day.setModel(null);
        day.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayActionPerformed(evt);
            }
        });
        */day.addItem("Select Day");
        jPanel2.add(day);
        day.setBounds(530, 520, 90, 27);

        jLabel5.setText("to");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(180, 560, 13, 16);

        ok.setText("OK");
        ok.setVisible(false);
        jPanel2.add(ok);
        ok.setBounds(390, 590, 75, 29);

        homeButton.setFont(new java.awt.Font("Lucida Handwriting", 0, 10)); // NOI18N
        homeButton.setText("Home");
        jPanel2.add(homeButton);
        homeButton.setBounds(10, 140, 160, 30);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bg3.png"))); // NOI18N
        jLabel2.setMaximumSize(new java.awt.Dimension(829, 630));
        jLabel2.setMinimumSize(new java.awt.Dimension(829, 630));
        jPanel2.add(jLabel2);
        jLabel2.setBounds(0, 0, 790, 630);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void TimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_TimeActionPerformed

private void AgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgeActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_AgeActionPerformed

    private void dayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dayActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GenReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GenReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GenReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GenReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new GenReport().setVisible(true);
                
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Age;
    private javax.swing.JTabbedPane AllServices;
    private javax.swing.JTabbedPane Express;
    private javax.swing.JTabbedPane Hilot;
    private javax.swing.JTabbedPane MontAlbo;
    private javax.swing.JTabbedPane Services;
    private javax.swing.JButton Sex;
    private javax.swing.JTabbedPane Swedish;
    private javax.swing.JTabbedPane ThaiShiatsu;
    private javax.swing.JButton Time;
    private javax.swing.JTabbedPane TuiNa;
    private javax.swing.JButton addClient;
    private javax.swing.JButton addEmployee;
    private javax.swing.JComboBox day;
    private javax.swing.JComboBox day1;
    private javax.swing.JButton exportButton;
    private javax.swing.JButton genReport;
    private javax.swing.JButton homeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton modifyE;
    private javax.swing.JComboBox month;
    private javax.swing.JComboBox month1;
    private javax.swing.JButton ok;
    private javax.swing.JButton viewClientProf;
    private javax.swing.JButton viewEmployee;
    private javax.swing.JComboBox year;
    private javax.swing.JComboBox year1;
    // End of variables declaration//GEN-END:variables

    public ChartPanel drawPieChart(String[] name, float[] number, String title){
    
        DefaultPieDataset dp = new DefaultPieDataset();
        for(int x = 0; x < name.length; x++){
            dp.setValue(name[x], number[x]);
        }
        JFreeChart ch = ChartFactory.createPieChart(title,dp,true,true,true);

        ChartPanel chart = new ChartPanel(ch);

        return chart;
    }
    
    public JPanel drawLineChart(String dates[],int[][] yvalue, String title){
    
        double max = 0;
        for(int x = 0; x<yvalue.length;x++){
            if (max<yvalue[0][x])
                max = yvalue[0][x];
            if (max<yvalue[1][x])
                max = yvalue[1][x];
        }
        DefaultCategoryDataset xy = new DefaultCategoryDataset();
        for(int x = 0; x < yvalue[0].length; x++){
            //System.out.println(yvalue[x]+" " + xvalue[x] +" " + ((int)yvalue[x]%(max+1))+"");
            xy.addValue(yvalue[0][x],"males",dates[x]);
            xy.addValue(yvalue[1][x],"female",dates[x]);
        }
    
    JFreeChart ch = ChartFactory.createBarChart(title, "months", "# of clients", xy, PlotOrientation.VERTICAL, true, true, false);
    JPanel chart=new ChartPanel(ch);
    
    final CategoryPlot plot = ch.getCategoryPlot();
        plot.setBackgroundPaint(Color.lightGray);
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);
    
    final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
    //chart.setVisible(true);
    //chart.setSize(300,300);
    
    return chart;
    }
    
    Statement st = null;
    ResultSet rs = null;
    //ResultSet gs = null
    PreparedStatement pst = null;
    Connection con = null;
    String tab = "Express";
    
    public int databaseQuerying(String script,String req){
                String url = "jdbc:mysql://localhost:3306/firstnoel?allowMultiQueries=true";
                String user = "lian";
                String password = "lian";
                //System.out.println("here");
                int total = 0;
                try {

                    con = (Connection) DriverManager.getConnection(url, user, password);
                    pst = (PreparedStatement) con.prepareStatement(script);
                    rs = pst.executeQuery();
                    if(req.equals("total"))
                        while (rs.next()) {
                            total++;
                        }
                    else if (req.equals("minmax")){
                        while (rs.next()) {
                        //rs.getInt(1);
                        total = rs.getInt(1);
                    }
                    }
                    System.out.println(total);
                    return total;

                } catch (SQLException ex) {
                        Logger lgr = Logger.getLogger(GenReport.class.getName());
                        lgr.log(Level.SEVERE, ex.getMessage(), ex);
                        return total;

                } finally {

                    try {
                        if (rs != null) {
                            rs.close();
                        }
                        if (pst != null) {
                            pst.close();
                        }
                        if (con != null) {
                            con.close();
                        }

                    } catch (SQLException ex) {
                        Logger lgr = Logger.getLogger(GenReport.class.getName());
                        lgr.log(Level.WARNING, ex.getMessage(), ex);
                    }
                    return total;
                }
    }
    
    public JPanel loadScriptTime(String service,String title,int y,int y1, int m, int m1,int d, int d1){
        if(service.equals("All Services")){
        String m2 = m+ "", m3 =m1+"";
        if(m<10)
            m2 = "0"+m;
        if(m1<10)
            m3 = "0" + m1;
        String script = "SELECT PERIOD_DIFF("+y1+m3+","+y+m2+")";
        String category[] = new String[this.databaseQuerying(script, "minmax")+1];
        int freq[][] = new int[2][this.databaseQuerying(script, "minmax")+1];
        System.out.println("SELECT PERIOD_DIFF("+y1+m3+","+y+m2+") "+ this.databaseQuerying(script, "minmax"));
 
        int x = 0;    
        for(int a = y; a<=y1;a++){
                int b = 1,c=0;
                if (a==y){
                    b=m;
                    if(a==y1)
                        c=m1;
                    else
                        c=12;
                    System.out.println("in here"+b);
                }
                else if (a==y1)
                    c=m1;
                else{
                    b=1; 
                    c=12;
                }
                for(b=b;b <=c; b++){
                    System.out.println(x+" "+b);
                    category[x] = b+"-"+a;
                    script = "SELECT clientOrder.o_date FROM clientOrder JOIN "
                            + "Client ON ClientOrder.clientID = client.c_number"
                            + " WHERE client.c_gender = 'M' AND "
                            + "YEAR(clientOrder.o_date) = " + a
                            + " AND MONTH(clientOrder.o_date) = " + b;
                    freq[0][x] = this.databaseQuerying(script, "total");
                    script = "SELECT clientOrder.o_date FROM clientOrder JOIN "
                            + "Client ON ClientOrder.clientID = client.c_number"
                            + " WHERE client.c_gender = 'F'AND "
                            + "YEAR(clientOrder.o_date) = " + a
                            + " AND MONTH(clientOrder.o_date) = " + b;
                    freq[1][x] = this.databaseQuerying(script, "total");
                    System.out.println(category[x]+" "+freq[0][x]+" "+freq[1][x]);
                    x++;
                }
            }
        JPanel chart = this.drawLineChart(category, freq, title);
        return chart;
        } else{
        String m2 = m+ "", m3 =m1+"";
        if(m<10)
            m2 = "0"+m;
        if(m1<10)
            m3 = "0" + m1;
        String script = "SELECT PERIOD_DIFF("+y1+m3+","+y+m2+")";
        String category[] = new String[this.databaseQuerying(script, "minmax")+1];
        int freq[][] = new int[2][this.databaseQuerying(script, "minmax")+1];
        System.out.println("SELECT PERIOD_DIFF("+y1+m3+","+y+m2+") "+ this.databaseQuerying(script, "minmax"));
 
        int x = 0;    
        for(int a = y; a<=y1;a++){
                int b = 1,c=0;
                if (a==y){
                    b=m;
                    if(a==y1)
                        c=m1;
                    else
                        c=12;
                    System.out.println("in here"+b);
                }
                else if (a==y1)
                    c=m1;
                else{
                    b=1; 
                    c=12;
                }
                for(b=b;b <=c; b++){
                    System.out.println(x+" "+b);
                    category[x] = b+"-"+a;
                    script = "SELECT clientOrder.o_date FROM Service "
                            + "JOIN OrderService ON  Service.s_number "
                            + "= OrderService.ServiceNum JOIN ClientOrder "
                            + "ON OrderService.Ordernum = ClientOrder.o_number "
                            + "JOIN Client ON ClientOrder.clientID = client.c_number "
                            + "WHERE client.c_gender = 'M' "
                            + "AND YEAR(clientOrder.o_date) =  " + a
                            + " AND MONTH(clientOrder.o_date) =  " + b
                            + " AND Service.s_name = '"+ service +"' ";
                    freq[0][x] = this.databaseQuerying(script, "total");
                    script = "SELECT clientOrder.o_date FROM Service "
                            + "JOIN OrderService ON  Service.s_number "
                            + "= OrderService.ServiceNum JOIN ClientOrder "
                            + "ON OrderService.Ordernum = ClientOrder.o_number "
                            + "JOIN Client ON ClientOrder.clientID = client.c_number "
                            + "WHERE client.c_gender = 'F' "
                            + "AND YEAR(clientOrder.o_date) =  " + a
                            + " AND MONTH(clientOrder.o_date) =  " + b
                            + " AND Service.s_name = '"+ service +"' ";
                    freq[1][x] = this.databaseQuerying(script, "total");
                    System.out.println(category[x]+" "+freq[0][x]+" "+freq[1][x]);
                    x++;
                }
            }
        JPanel chart = this.drawLineChart(category, freq, title);
        return chart;
        }
    }
    
    public JPanel loadScriptAge(String service,String title){
        if(service.equals("All Services")){
          float agePercent[] = new float[5];
            String ageGroup[] = {"<18","18-25","25-40","40-60",">60"};
  
                        String script = "SELECT (YEAR(clientOrder.o_date)"
                                + "-YEAR(Client.c_birthday)) - "
                                + "(RIGHT(clientOrder.o_date,5)<RIGHT(Client.c_"
                                + "birthday,5)) AS age FROM clientOrder "
                                + "JOIN client ON Client.c_number = clientOrder"
                                + ".clientID WHERE (YEAR(clientOrder.o_date)"
                                + "-YEAR(Client.c_birthday))"
                                + "- (RIGHT(clientOrder.o_date,5)<RIGHT(Client."
                                + "c_birthday,5))<18 ";
                        agePercent[0] = this.databaseQuerying(script,"total");
                        
                        script = "SELECT (YEAR(clientOrder.o_date)"
                                + "-YEAR(Client.c_birthday)) - "
                                + "(RIGHT(clientOrder.o_date,5)<RIGHT(Client.c_"
                                + "birthday,5)) AS age FROM clientOrder "
                                + "JOIN client ON Client.c_number = clientOrder"
                                + ".clientID WHERE (YEAR(clientOrder.o_date)"
                                + "-YEAR(Client.c_birthday))"
                                + "- (RIGHT(clientOrder.o_date,5)<RIGHT(Client."
                                + "c_birthday,5))>=18 AND (YEAR(clientOrder.o_date)"
                                + "-YEAR(Client.c_birthday))- (RIGHT(clien"
                                + "tOrder.o_date,5)<RIGHT(Client.c_birthday,5))<=25";
                        agePercent[1] = this.databaseQuerying(script,"total");
                        script = "SELECT (YEAR(clientOrder.o_date)"
                                + "-YEAR(Client.c_birthday)) - "
                                + "(RIGHT(clientOrder.o_date,5)<RIGHT(Client.c_"
                                + "birthday,5)) AS age FROM clientOrder "
                                + "JOIN client ON Client.c_number = clientOrder"
                                + ".clientID WHERE (YEAR(clientOrder.o_date)"
                                + "-YEAR(Client.c_birthday))"
                                + "- (RIGHT(clientOrder.o_date,5)<RIGHT(Client."
                                + "c_birthday,5))>25 AND (YEAR(clientOrder.o_date)"
                                + "-YEAR(Client.c_birthday))- (RIGHT(clien"
                                + "tOrder.o_date,5)<RIGHT(Client.c_birthday,5))<=40";
                        agePercent[2] = this.databaseQuerying(script,"total");
                        script = "SELECT (YEAR(clientOrder.o_date)"
                                + "-YEAR(Client.c_birthday)) - "
                                + "(RIGHT(clientOrder.o_date,5)<RIGHT(Client.c_"
                                + "birthday,5)) AS age FROM clientOrder "
                                + "JOIN client ON Client.c_number = clientOrder"
                                + ".clientID WHERE (YEAR(clientOrder.o_date)"
                                + "-YEAR(Client.c_birthday))"
                                + "- (RIGHT(clientOrder.o_date,5)<RIGHT(Client."
                                + "c_birthday,5))>40 AND (YEAR(clientOrder.o_date)"
                                + "-YEAR(Client.c_birthday))- (RIGHT(clien"
                                + "tOrder.o_date,5)<RIGHT(Client.c_birthday,5))<=60";
                        agePercent[3] = this.databaseQuerying(script,"total");
                        script = "SELECT (YEAR(clientOrder.o_date)"
                                + "-YEAR(Client.c_birthday)) - "
                                + "(RIGHT(clientOrder.o_date,5)<RIGHT(Client.c_"
                                + "birthday,5)) AS age FROM clientOrder "
                                + "JOIN client ON Client.c_number = clientOrder"
                                + ".clientID WHERE (YEAR(clientOrder.o_date)"
                                + "-YEAR(Client.c_birthday))"
                                + "- (RIGHT(clientOrder.o_date,5)<RIGHT(Client."
                                + "c_birthday,5))>60 ";
                        agePercent[4] = this.databaseQuerying(script,"total");
                        JPanel report = this.drawPieChart(ageGroup,agePercent , title);
                        return report;
        }else{
            float agePercent[] = new float[5];
            String ageGroup[] = {"<18","18-25","25-40","40-60",">60"};
  
                        String script = "SELECT (YEAR(clientOrder.o_date)"
                                + "-YEAR(Client.c_birthday)) - "
                                + "(RIGHT(clientOrder.o_date,5)<RIGHT(Client.c_birthday,5))"
                                + " AS age FROM service JOIN orderService ON "
                                + "orderService.serviceNum = Service.s_number "
                                + "JOIN clientOrder ON clientOrder.o_number = "
                                + "orderService.orderNum JOIN client ON "
                                + "Client.c_number = clientOrder.clientID WHERE"
                                + " (YEAR(clientOrder.o_date)-YEAR(Client.c_birthday))"
                                +"- (RIGHT(clientOrder.o_date,5)"
                                + "<RIGHT(Client.c_birthday,5))<18 AND "
                                + "Service.s_name = '"+ service +"' "
                                + "GROUP BY Client.c_name, Client.c_birthday";
                        
                        agePercent[0] = this.databaseQuerying(script,"total");
                        
                        script = "SELECT (YEAR(clientOrder.o_date)"
                                + "-YEAR(Client.c_birthday)) - "
                                + "(RIGHT(clientOrder.o_date,5)<RIGHT(Client.c_birthday,5))"
                                + " AS age FROM service JOIN orderService ON "
                                + "orderService.serviceNum = Service.s_number "
                                + "JOIN clientOrder ON clientOrder.o_number = "
                                + "orderService.orderNum JOIN client ON "
                                + "Client.c_number = clientOrder.clientID WHERE"
                                + " (YEAR(clientOrder.o_date)-YEAR(Client.c_birthday))"
                                +"- (RIGHT(clientOrder.o_date,5)"
                                + "<RIGHT(Client.c_birthday,5))>=18 AND "
                                + " (YEAR(clientOrder.o_date)-YEAR(Client.c_birthday))"
                                +"- (RIGHT(clientOrder.o_date,5)"
                                + "<RIGHT(Client.c_birthday,5))<=25 AND "
                                + "Service.s_name = '"+ service +"' "
                                + "GROUP BY Client.c_name, Client.c_birthday";
                        agePercent[1] = this.databaseQuerying(script,"total");
                        //System.out.println(script);
                        script = "SELECT (YEAR(clientOrder.o_date)"
                                + "-YEAR(Client.c_birthday)) - "
                                + "(RIGHT(clientOrder.o_date,5)<RIGHT(Client.c_birthday,5))"
                                + " AS age FROM service JOIN orderService ON "
                                + "orderService.serviceNum = Service.s_number "
                                + "JOIN clientOrder ON clientOrder.o_number = "
                                + "orderService.orderNum JOIN client ON "
                                + "Client.c_number = clientOrder.clientID WHERE"
                                + " (YEAR(clientOrder.o_date)-YEAR(Client.c_birthday))"
                                +"- (RIGHT(clientOrder.o_date,5)"
                                + "<RIGHT(Client.c_birthday,5))>25 AND "
                                + " (YEAR(clientOrder.o_date)-YEAR(Client.c_birthday))"
                                +"- (RIGHT(clientOrder.o_date,5)"
                                + "<RIGHT(Client.c_birthday,5))<=40 AND "
                                + "Service.s_name = '"+ service +"' "
                                + "GROUP BY Client.c_name, Client.c_birthday";
                        agePercent[2] = this.databaseQuerying(script,"total");
                        script = "SELECT (YEAR(clientOrder.o_date)"
                                + "-YEAR(Client.c_birthday)) - "
                                + "(RIGHT(clientOrder.o_date,5)<RIGHT(Client.c_birthday,5))"
                                + " AS age FROM service JOIN orderService ON "
                                + "orderService.serviceNum = Service.s_number "
                                + "JOIN clientOrder ON clientOrder.o_number = "
                                + "orderService.orderNum JOIN client ON "
                                + "Client.c_number = clientOrder.clientID WHERE"
                                + " (YEAR(clientOrder.o_date)-YEAR(Client.c_birthday))"
                                +"- (RIGHT(clientOrder.o_date,5)"
                                + "<RIGHT(Client.c_birthday,5))>40 AND "
                                + " (YEAR(clientOrder.o_date)-YEAR(Client.c_birthday))"
                                +"- (RIGHT(clientOrder.o_date,5)"
                                + "<RIGHT(Client.c_birthday,5))<=60 AND " 
                                + "Service.s_name = '"+ service +"' "
                                + "GROUP BY Client.c_name, Client.c_birthday";
                        agePercent[3] = this.databaseQuerying(script,"total");
                        script = "SELECT (YEAR(clientOrder.o_date)"
                                + "-YEAR(Client.c_birthday)) - "
                                + "(RIGHT(clientOrder.o_date,5)<RIGHT(Client.c_birthday,5))"
                                + " AS age FROM service JOIN orderService ON "
                                + "orderService.serviceNum = Service.s_number "
                                + "JOIN clientOrder ON clientOrder.o_number = "
                                + "orderService.orderNum JOIN client ON "
                                + "Client.c_number = clientOrder.clientID WHERE"
                                + " (YEAR(clientOrder.o_date)-YEAR(Client.c_birthday))"
                                +"- (RIGHT(clientOrder.o_date,5)"
                                + "<RIGHT(Client.c_birthday,5))>60 AND "
                                + "Service.s_name = '"+ service +"' "
                                + "GROUP BY Client.c_name, Client.c_birthday";
                        agePercent[4] = this.databaseQuerying(script,"total");
                        JPanel report = this.drawPieChart(ageGroup,agePercent , title);
                        return report;
        }
    }
    
    public JPanel loadScriptSex(String service,String title){
        if(service.equals("All Services")){
            
                    float sexPercent[] = new float[2];
                    String sexes[] = {"M","F"};
                    
                        String script = "SELECT * FROM Client WHERE Client.c_gender = 'M'";
                        sexPercent[0] = this.databaseQuerying(script,"total");
                        //System.out.println(partial);
                        
                        script ="SELECT * FROM Client WHERE Client.c_gender = 'F'";
                        sexPercent[1] = this.databaseQuerying(script,"total");
                        System.out.println(sexes[0] + " " + sexPercent[0] + " " + sexes[1] + " " + sexPercent[1]); 
                        //sexPercent[0] = 70;
                        //sexPercent[1] = 30;
                        JPanel report = this.drawPieChart(sexes,sexPercent , title);
                        return report;
        }else{
            float sexPercent[] = new float[2];
            String sexes[] = {"M","F"};
  
                        String script = "SELECT Service.s_number, " +
                        "Client.c_name, " +
                        "Client.c_gender " +
                        "FROM service " +
                        "JOIN orderService " +
                        "ON orderService.serviceNum = Service.s_number " +
                        "JOIN clientOrder " +
                        "ON clientOrder.o_number = orderService.orderNum " +
                        "JOIN client " +
                        "ON Client.c_number = clientOrder.clientID " +
                        "WHERE Service.s_name = '"+ service +"' AND Client.c_gender = 'M' "+
                        "GROUP BY Client.c_name, " +
                        "Service.s_number, " +
                        "Service.s_name";
                        sexPercent[0] = this.databaseQuerying(script,"total");
                        
                        script ="SELECT Service.s_number, " +
                        "Client.c_name, " +
                        "Client.c_gender " +
                        "FROM service " +
                        "JOIN orderService " +
                        "ON orderService.serviceNum = Service.s_number " +
                        "JOIN clientOrder " +
                        "ON clientOrder.o_number = orderService.orderNum " +
                        "JOIN client " +
                        "ON Client.c_number = clientOrder.clientID " +
                        "WHERE Service.s_name = '"+ service +"' AND Client.c_gender = 'F' "+
                        "GROUP BY Client.c_name, " +
                        "Service.s_number, " +
                        "Service.s_name";
                        sexPercent[1] = this.databaseQuerying(script,"total");
                        System.out.println(sexes[0] + " " + sexPercent[0] + " " + sexes[1] + " " + sexPercent[1]); 
                        //sexPercent[0] = 70;
                        //sexPercent[1] = 30;
                        JPanel report = this.drawPieChart(sexes,sexPercent , title);
                        return report;
        }
    }
    
    
    @Override
    public void actionPerformed(ActionEvent evt) {
        System.out.println(evt.getActionCommand()+" "+ Services.getTitleAt(Services.getSelectedIndex()));
        if(evt.getSource() == year){
            day.removeAllItems();
            day.addItem("Select Day");
            if(month.getSelectedItem().toString().equals("1")||month.getSelectedItem().toString().equals("3")||month.getSelectedItem().toString().equals("5")||month.getSelectedItem().toString().equals("7")||month.getSelectedItem().toString().equals("8")||month.getSelectedItem().toString().equals("10")||month.getSelectedItem().toString().equals("12"))
            for(int x = 1; x<32 ; x++){
                day.addItem(x);
            }
            else if(month.getSelectedItem().toString().equals("4")||month.getSelectedItem().toString().equals("6")||month.getSelectedItem().toString().equals("9")||month.getSelectedItem().toString().equals("11"))
            for(int x = 1; x<31 ; x++){
                day.addItem(x);
            }
            else if(month.getSelectedItem().toString().equals("2")&& (Integer.parseInt(year.getSelectedItem().toString()))%4==0)//leap year
            for(int x = 1; x<30 ; x++){
                day.addItem(x);System.out.println((Integer.parseInt(year.getSelectedItem().toString()))%4);

            }
            else if(month.getSelectedItem().toString().equals("2"))
            for(int x = 1; x<29 ; x++){
                day.addItem(x);
            }
        }
        if(evt.getSource() == month){
            day.removeAllItems();
            day.addItem("Select Day");
            if(month.getSelectedItem().toString().equals("1")||month.getSelectedItem().toString().equals("3")||month.getSelectedItem().toString().equals("5")||month.getSelectedItem().toString().equals("7")||month.getSelectedItem().toString().equals("8")||month.getSelectedItem().toString().equals("10")||month.getSelectedItem().toString().equals("12"))
            for(int x = 1; x<32 ; x++){
                day.addItem(x);
            }
            else if(month.getSelectedItem().toString().equals("4")||month.getSelectedItem().toString().equals("6")||month.getSelectedItem().toString().equals("9")||month.getSelectedItem().toString().equals("11"))
            for(int x = 1; x<31 ; x++){
                day.addItem(x);
            }
            else if(month.getSelectedItem().toString().equals("2")&& (Integer.parseInt(year.getSelectedItem().toString()))%4==0)//leap year
            for(int x = 1; x<30 ; x++){
                day.addItem(x);System.out.println((Integer.parseInt(year.getSelectedItem().toString()))%4);

            }
            else if(month.getSelectedItem().toString().equals("2"))
            for(int x = 1; x<29 ; x++){
                day.addItem(x);
            }
        }
        if(evt.getSource() == year1){
            day1.removeAllItems();
            day1.addItem("Select Day");
            if(month1.getSelectedItem().toString().equals("1")||month1.getSelectedItem().toString().equals("3")||month1.getSelectedItem().toString().equals("5")||month1.getSelectedItem().toString().equals("7")||month1.getSelectedItem().toString().equals("8")||month1.getSelectedItem().toString().equals("10")||month1.getSelectedItem().toString().equals("12"))
            for(int x = 1; x<32 ; x++){
                day1.addItem(x);
            }
            else if(month1.getSelectedItem().toString().equals("4")||month1.getSelectedItem().toString().equals("6")||month1.getSelectedItem().toString().equals("9")||month1.getSelectedItem().toString().equals("11"))
            for(int x = 1; x<31 ; x++){
                day1.addItem(x);
            }
            else if(month1.getSelectedItem().toString().equals("2")&& (Integer.parseInt(year1.getSelectedItem().toString()))%4==0)//leap year
            for(int x = 1; x<30 ; x++){
                day1.addItem(x);System.out.println((Integer.parseInt(year1.getSelectedItem().toString()))%4);

            }
            else if(month1.getSelectedItem().toString().equals("2"))
            for(int x = 1; x<29 ; x++){
                day1.addItem(x);
            }
        }
        if(evt.getSource() == month1){
            day1.removeAllItems();
            day1.addItem("Select Day");
            if(month1.getSelectedItem().toString().equals("1")||month1.getSelectedItem().toString().equals("3")||month1.getSelectedItem().toString().equals("5")||month1.getSelectedItem().toString().equals("7")||month1.getSelectedItem().toString().equals("8")||month1.getSelectedItem().toString().equals("10")||month1.getSelectedItem().toString().equals("12"))
            for(int x = 1; x<32 ; x++){
                day1.addItem(x);
            }
            else if(month1.getSelectedItem().toString().equals("4")||month1.getSelectedItem().toString().equals("6")||month1.getSelectedItem().toString().equals("9")||month1.getSelectedItem().toString().equals("11"))
            for(int x = 1; x<31 ; x++){
                day1.addItem(x);
            }
            else if(month1.getSelectedItem().toString().equals("2")&& (Integer.parseInt(year1.getSelectedItem().toString()))%4==0)//leap year
            for(int x = 1; x<30 ; x++){
                day1.addItem(x);System.out.println((Integer.parseInt(year1.getSelectedItem().toString()))%4);

            }
            else if(month1.getSelectedItem().toString().equals("2"))
            for(int x = 1; x<29 ; x++){
                day1.addItem(x);
            }
        }
        if(evt.getSource() == ok && Services.getTitleAt(Services.getSelectedIndex()).equals("All Services")){
            if(year.getSelectedItem().equals("Select Year")||month.getSelectedItem().equals("Select Month")||day.getSelectedItem().equals("Select Day")||
                year1.getSelectedItem().equals("Select Year")||month1.getSelectedItem().equals("Select Month")||day1.getSelectedItem().equals("Select Day"))
                javax.swing.JOptionPane.showMessageDialog(null, "Complete all inputs");
            else{
                int y = Integer.parseInt(year.getSelectedItem().toString());
                int y1 = Integer.parseInt(year1.getSelectedItem().toString());
                int m = Integer.parseInt(month.getSelectedItem().toString());
                int m1 = Integer.parseInt(month1.getSelectedItem().toString());
                int d = Integer.parseInt(day.getSelectedItem().toString());
                int d1 = Integer.parseInt(day1.getSelectedItem().toString());
                if(y>y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your years");

                }else if(m>=m1&&y==y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your months");
                }else if(d>d1&&m==m1&&y==y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your days");
                }else{
                    JPanel report = this.loadScriptTime(Services.getTitleAt(Services.getSelectedIndex()),"Time Breakdown, All Services",y,y1,m,m1,d,d1);
                    report.setVisible(true);
                        report.setSize(300, 300);
                        AllServices.removeAll();
                        AllServices.add(report);
                }
            }
        }
        if(evt.getSource() == ok && Services.getTitleAt(Services.getSelectedIndex()).equals("Express")){
            if(year.getSelectedItem().equals("Select Year")||month.getSelectedItem().equals("Select Month")||day.getSelectedItem().equals("Select Day")||
                year1.getSelectedItem().equals("Select Year")||month1.getSelectedItem().equals("Select Month")||day1.getSelectedItem().equals("Select Day"))
                javax.swing.JOptionPane.showMessageDialog(null, "Complete all inputs");
            else{
                int y = Integer.parseInt(year.getSelectedItem().toString());
                int y1 = Integer.parseInt(year1.getSelectedItem().toString());
                int m = Integer.parseInt(month.getSelectedItem().toString());
                int m1 = Integer.parseInt(month1.getSelectedItem().toString());
                int d = Integer.parseInt(day.getSelectedItem().toString());
                int d1 = Integer.parseInt(day1.getSelectedItem().toString());
                if(y>y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your years");

                }else if(m>=m1&&y==y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your months");
                }else if(d>d1&&m==m1&&y==y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your days");
                }else{
                    JPanel report = this.loadScriptTime(Services.getTitleAt(Services.getSelectedIndex()),"Time Breakdown, Express",y,y1,m,m1,d,d1);
                report.setVisible(true);
                    report.setSize(300, 300);
                    Express.removeAll();
                    Express.add(report);
                }
            }
            
        }
        
        if(evt.getSource() == ok && Services.getTitleAt(Services.getSelectedIndex()).equals("Hilot")){
            if(year.getSelectedItem().equals("Select Year")||month.getSelectedItem().equals("Select Month")||day.getSelectedItem().equals("Select Day")||
                year1.getSelectedItem().equals("Select Year")||month1.getSelectedItem().equals("Select Month")||day1.getSelectedItem().equals("Select Day"))
                javax.swing.JOptionPane.showMessageDialog(null, "Complete all inputs");
            else{
                int y = Integer.parseInt(year.getSelectedItem().toString());
                int y1 = Integer.parseInt(year1.getSelectedItem().toString());
                int m = Integer.parseInt(month.getSelectedItem().toString());
                int m1 = Integer.parseInt(month1.getSelectedItem().toString());
                int d = Integer.parseInt(day.getSelectedItem().toString());
                int d1 = Integer.parseInt(day1.getSelectedItem().toString());
                if(y>y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your years");

                }else if(m>=m1&&y==y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your months");
                }else if(d>d1&&m==m1&&y==y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your days");
                }else{
                    JPanel report = this.loadScriptTime(Services.getTitleAt(Services.getSelectedIndex()),"Time Breakdown, Hilot",y,y1,m,m1,d,d1);
                report.setVisible(true);
                    report.setSize(300, 300);
                    Hilot.removeAll();
                    Hilot.add(report);
                }
            }
            
        }
        
        if(evt.getSource() == ok && Services.getTitleAt(Services.getSelectedIndex()).equals("Mont Albo")){
            if(year.getSelectedItem().equals("Select Year")||month.getSelectedItem().equals("Select Month")||day.getSelectedItem().equals("Select Day")||
                year1.getSelectedItem().equals("Select Year")||month1.getSelectedItem().equals("Select Month")||day1.getSelectedItem().equals("Select Day"))
                javax.swing.JOptionPane.showMessageDialog(null, "Complete all inputs");
            else{
                int y = Integer.parseInt(year.getSelectedItem().toString());
                int y1 = Integer.parseInt(year1.getSelectedItem().toString());
                int m = Integer.parseInt(month.getSelectedItem().toString());
                int m1 = Integer.parseInt(month1.getSelectedItem().toString());
                int d = Integer.parseInt(day.getSelectedItem().toString());
                int d1 = Integer.parseInt(day1.getSelectedItem().toString());
                if(y>y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your years");

                }else if(m>=m1&&y==y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your months");
                }else if(d>d1&&m==m1&&y==y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your days");
                }else{
                    JPanel report = this.loadScriptTime(Services.getTitleAt(Services.getSelectedIndex()),"Time Breakdown, Mont Albo",y,y1,m,m1,d,d1);
                report.setVisible(true);
                    report.setSize(300, 300);
                    MontAlbo.removeAll();
                    MontAlbo.add(report);
                }
            } 
        }
        
        if(evt.getSource() == ok && Services.getTitleAt(Services.getSelectedIndex()).equals("Swedish")){
            if(year.getSelectedItem().equals("Select Year")||month.getSelectedItem().equals("Select Month")||day.getSelectedItem().equals("Select Day")||
                year1.getSelectedItem().equals("Select Year")||month1.getSelectedItem().equals("Select Month")||day1.getSelectedItem().equals("Select Day"))
                javax.swing.JOptionPane.showMessageDialog(null, "Complete all inputs");
            else{
                int y = Integer.parseInt(year.getSelectedItem().toString());
                int y1 = Integer.parseInt(year1.getSelectedItem().toString());
                int m = Integer.parseInt(month.getSelectedItem().toString());
                int m1 = Integer.parseInt(month1.getSelectedItem().toString());
                int d = Integer.parseInt(day.getSelectedItem().toString());
                int d1 = Integer.parseInt(day1.getSelectedItem().toString());
                if(y>y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your years");

                }else if(m>=m1&&y==y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your months");
                }else if(d>d1&&m==m1&&y==y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your days");
                }else{
                    JPanel report = this.loadScriptTime(Services.getTitleAt(Services.getSelectedIndex()),"Time Breakdown, Swedish",y,y1,m,m1,d,d1);
                report.setVisible(true);
                    report.setSize(300, 300);
                    Swedish.removeAll();
                    Swedish.add(report);
                }
            } 
        }
        
        if(evt.getSource() == ok && Services.getTitleAt(Services.getSelectedIndex()).equals("Thai-Shiatsu")){
            if(year.getSelectedItem().equals("Select Year")||month.getSelectedItem().equals("Select Month")||day.getSelectedItem().equals("Select Day")||
                year1.getSelectedItem().equals("Select Year")||month1.getSelectedItem().equals("Select Month")||day1.getSelectedItem().equals("Select Day"))
                javax.swing.JOptionPane.showMessageDialog(null, "Complete all inputs");
            else{
                int y = Integer.parseInt(year.getSelectedItem().toString());
                int y1 = Integer.parseInt(year1.getSelectedItem().toString());
                int m = Integer.parseInt(month.getSelectedItem().toString());
                int m1 = Integer.parseInt(month1.getSelectedItem().toString());
                int d = Integer.parseInt(day.getSelectedItem().toString());
                int d1 = Integer.parseInt(day1.getSelectedItem().toString());
                if(y>y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your years");

                }else if(m>=m1&&y==y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your months");
                }else if(d>d1&&m==m1&&y==y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your days");
                }else{
                    JPanel report = this.loadScriptTime(Services.getTitleAt(Services.getSelectedIndex()),"Time Breakdown, Thai-Shiatsu",y,y1,m,m1,d,d1);
                report.setVisible(true);
                    report.setSize(300, 300);
                    ThaiShiatsu.removeAll();
                    ThaiShiatsu.add(report);
                }
            }
             
        }
        
        if(evt.getSource() == ok && Services.getTitleAt(Services.getSelectedIndex()).equals("Tui Na")){
            if(year.getSelectedItem().equals("Select Year")||month.getSelectedItem().equals("Select Month")||day.getSelectedItem().equals("Select Day")||
                year1.getSelectedItem().equals("Select Year")||month1.getSelectedItem().equals("Select Month")||day1.getSelectedItem().equals("Select Day"))
                javax.swing.JOptionPane.showMessageDialog(null, "Complete all inputs");
            else{
                int y = Integer.parseInt(year.getSelectedItem().toString());
                int y1 = Integer.parseInt(year1.getSelectedItem().toString());
                int m = Integer.parseInt(month.getSelectedItem().toString());
                int m1 = Integer.parseInt(month1.getSelectedItem().toString());
                int d = Integer.parseInt(day.getSelectedItem().toString());
                int d1 = Integer.parseInt(day1.getSelectedItem().toString());
                if(y>y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your years");

                }else if(m>=m1&&y==y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your months");
                }else if(d>d1&&m==m1&&y==y1){
                    javax.swing.JOptionPane.showMessageDialog(null,"Error! Check your days");
                }else{
                    JPanel report = this.loadScriptTime(Services.getTitleAt(Services.getSelectedIndex()),"Time Breakdown, Tui Na",y,y1,m,m1,d,d1);
                report.setVisible(true);
                    report.setSize(300, 300);
                    TuiNa.removeAll();
                    TuiNa.add(report);
                }
            }
            
        }
        
        if(evt.getSource() == viewClientProf)
		{
			System.out.print("s");
			try {
				clientSummary client_sum = new clientSummary();
                                //client_sum.jPanel3.setVisible(true);
                                //client_sum.jTabbedPane1.setVisible(true);
				client_sum.setVisible(true);
				this.setVisible(false);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
			
		
		}
              if(evt.getSource() == addClient)
		{
			System.out.print("s");
			try {
				GUIcs192 add_client = new GUIcs192();
				add_client.setVisible(true);
				this.setVisible(false);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
			
		
		}
            if(evt.getSource() == addEmployee)
		{
			System.out.print("s");
			try {
				AddEmployee add_employ = new AddEmployee();
				add_employ.setVisible(true);
				this.setVisible(false);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
			
		
		}
            if(evt.getSource() == homeButton)
		{
			System.out.print("s");
			try {
                            HomeView home = new HomeView();
                            home.setVisible(true);
                            this.setVisible(false);                            
			} catch (Exception e1) {
				// TODO Auto-generated catch block
                                System.out.println("TEST");
				e1.printStackTrace();
			}
		}
            if(evt.getSource() == Time)
		{
                    this.jLabel4.setVisible(true);
                    this.jLabel5.setVisible(true);
                    this.jLabel6.setVisible(true);
                    this.jLabel7.setVisible(true);
                    this.year.setVisible(true);
                    this.year1.setVisible(true);
                    this.month.setVisible(true);
                    this.month1.setVisible(true);
                    this.day.setVisible(true);
                    this.day1.setVisible(true);
                    this.ok.setVisible(true);
                    this.exportButton.setVisible(false);
		
		}
            
            if(evt.getSource() == Sex && Services.getTitleAt(Services.getSelectedIndex()).equals("All Services"))
		{
                    this.jLabel4.setVisible(false);
                    this.jLabel5.setVisible(false);
                    this.jLabel6.setVisible(false);
                    this.jLabel7.setVisible(false);
                    this.year.setVisible(false);
                    this.year1.setVisible(false);
                    this.month.setVisible(false);
                    this.month1.setVisible(false);
                    this.day.setVisible(false);
                    this.day1.setVisible(false);
                    this.ok.setVisible(false);

                    JPanel report = this.loadScriptSex(Services.getTitleAt(Services.getSelectedIndex()),"Sexes Breakdown, All Services");
                    report.setVisible(true);
                    report.setSize(300, 300);
                    AllServices.removeAll();
                    AllServices.add(report);
                    exportButton.setVisible(true);
                    graphWith = "Sex";
		
		}
            
            if(evt.getSource() == Age && Services.getTitleAt(Services.getSelectedIndex()).equals("All Services"))
		{
                    this.jLabel4.setVisible(false);
                    this.jLabel5.setVisible(false);
                    this.jLabel6.setVisible(false);
                    this.jLabel7.setVisible(false);
                    this.year.setVisible(false);
                    this.year1.setVisible(false);
                    this.month.setVisible(false);
                    this.month1.setVisible(false);
                    this.day.setVisible(false);
                    this.day1.setVisible(false);
                    this.ok.setVisible(false);

                    JPanel report = this.loadScriptAge(Services.getTitleAt(Services.getSelectedIndex()),"Age Breakdown, All Services");
                    report.setVisible(true);
                    report.setSize(300, 300);
                    AllServices.removeAll();
                    AllServices.add(report);
                    exportButton.setVisible(true);
                    graphWith = "Age";
		
		}
            
            if(evt.getSource() == Sex && Services.getTitleAt(Services.getSelectedIndex()).equals("Express"))
		{

                    this.jLabel4.setVisible(false);
                    this.jLabel5.setVisible(false);
                    this.jLabel6.setVisible(false);
                    this.jLabel7.setVisible(false);
                    this.year.setVisible(false);
                    this.year1.setVisible(false);
                    this.month.setVisible(false);
                    this.month1.setVisible(false);
                    this.day.setVisible(false);
                    this.day1.setVisible(false);
                    this.ok.setVisible(false);
                    JPanel report = this.loadScriptSex(Services.getTitleAt(Services.getSelectedIndex()),"Sexes Breakdown, Express Massage");
                    report.setVisible(true);
                    report.setSize(300, 300);
                    Express.removeAll();
                    Express.add(report);
                    
                    exportButton.setVisible(true);
                    graphWith = "Sex";
		
		}
            
            if(evt.getSource() == Age && Services.getTitleAt(Services.getSelectedIndex()).equals("Express"))
		{
                    this.jLabel4.setVisible(false);
                    this.jLabel5.setVisible(false);
                    this.jLabel6.setVisible(false);
                    this.jLabel7.setVisible(false);
                    this.year.setVisible(false);
                    this.year1.setVisible(false);
                    this.month.setVisible(false);
                    this.month1.setVisible(false);
                    this.day.setVisible(false);
                    this.day1.setVisible(false);
                    this.ok.setVisible(false);

                    JPanel report = this.loadScriptAge(Services.getTitleAt(Services.getSelectedIndex()),"Age Breakdown, Express Massage");
                    report.setVisible(true);
                    report.setSize(300, 300);
                    Express.removeAll();
                    Express.add(report);
                    exportButton.setVisible(true);
                    graphWith = "Age";
		
		}
            
            if(evt.getSource() == Sex && Services.getTitleAt(Services.getSelectedIndex()).equals("Mont Albo"))
		{
                    this.jLabel4.setVisible(false);
                    this.jLabel5.setVisible(false);
                    this.jLabel6.setVisible(false);
                    this.jLabel7.setVisible(false);
                    this.year.setVisible(false);
                    this.year1.setVisible(false);
                    this.month.setVisible(false);
                    this.month1.setVisible(false);
                    this.day.setVisible(false);
                    this.day1.setVisible(false);
                    this.ok.setVisible(false);

                        JPanel report = this.loadScriptSex(Services.getTitleAt(Services.getSelectedIndex()),"Sexes Breakdown, Mont Albo massage");
                        report.setVisible(true);
                        report.setSize(300, 300);
                        MontAlbo.removeAll();
                        MontAlbo.add(report);
                        exportButton.setVisible(true);
                        graphWith = "Sex";
		
		}
            
            if(evt.getSource() == Age && Services.getTitleAt(Services.getSelectedIndex()).equals("Mont Albo"))
		{
                    this.jLabel4.setVisible(false);
                    this.jLabel5.setVisible(false);
                    this.jLabel6.setVisible(false);
                    this.jLabel7.setVisible(false);
                    this.year.setVisible(false);
                    this.year1.setVisible(false);
                    this.month.setVisible(false);
                    this.month1.setVisible(false);
                    this.day.setVisible(false);
                    this.day1.setVisible(false);
                    this.ok.setVisible(false);

                        JPanel report = this.loadScriptAge(Services.getTitleAt(Services.getSelectedIndex()),"Age Breakdown, Mont Albo massage");
                        report.setVisible(true);
                        report.setSize(300, 300);
                        MontAlbo.removeAll();
                        MontAlbo.add(report);
                        exportButton.setVisible(true);
                        graphWith = "Age";
		
		}
            
            if(evt.getSource() == Sex && Services.getTitleAt(Services.getSelectedIndex()).equals("Hilot"))
		{


                    this.jLabel4.setVisible(false);
                    this.jLabel5.setVisible(false);
                    this.jLabel6.setVisible(false);
                    this.jLabel7.setVisible(false);
                    this.year.setVisible(false);
                    this.year1.setVisible(false);
                    this.month.setVisible(false);
                    this.month1.setVisible(false);
                    this.day.setVisible(false);
                    this.day1.setVisible(false);
                    this.ok.setVisible(false);
                    JPanel report = this.loadScriptSex(Services.getTitleAt(Services.getSelectedIndex()),"Sexes Breakdown, Hilot");
                    report.setVisible(true);
                    report.setSize(300, 300);
                    Hilot.removeAll();
                    Hilot.add(report);
                    exportButton.setVisible(true);
                    graphWith = "Sex";
                    
                    
                    
		
		}
            if(evt.getSource() == Sex && Services.getTitleAt(Services.getSelectedIndex()).equals("Swedish"))
		{


                    this.jLabel4.setVisible(false);
                    this.jLabel5.setVisible(false);
                    this.jLabel6.setVisible(false);
                    this.jLabel7.setVisible(false);
                    this.year.setVisible(false);
                    this.year1.setVisible(false);
                    this.month.setVisible(false);
                    this.month1.setVisible(false);
                    this.day.setVisible(false);
                    this.day1.setVisible(false);
                    this.ok.setVisible(false);
                    JPanel report = this.loadScriptSex(Services.getTitleAt(Services.getSelectedIndex()),"Sexes Breakdown, Swedish Massage");
                    report.setVisible(true);
                    report.setSize(300, 300);
                    Swedish.removeAll();
                    Swedish.add(report);
                    exportButton.setVisible(true);
                    graphWith = "Sex";
		
		}
            
            if(evt.getSource() == Sex && Services.getTitleAt(Services.getSelectedIndex()).equals("Thai-Shiatsu"))
		{

                    this.jLabel4.setVisible(false);
                    this.jLabel5.setVisible(false);
                    this.jLabel6.setVisible(false);
                    this.jLabel7.setVisible(false);
                    this.year.setVisible(false);
                    this.year1.setVisible(false);
                    this.month.setVisible(false);
                    this.month1.setVisible(false);
                    this.day.setVisible(false);
                    this.day1.setVisible(false);
                    this.ok.setVisible(false);

                    JPanel report = this.loadScriptSex(Services.getTitleAt(Services.getSelectedIndex()),"Sexes Breakdown, Thai-Shiatsu");
                    report.setVisible(true);
                    report.setSize(300, 300);
                    ThaiShiatsu.removeAll();
                    ThaiShiatsu.add(report);
                    exportButton.setVisible(true);
                    graphWith = "Sex";
		
		}
            
            if(evt.getSource() == Sex && Services.getTitleAt(Services.getSelectedIndex()).equals("Tui Na"))
		{
                    this.jLabel4.setVisible(false);
                    this.jLabel5.setVisible(false);
                    this.jLabel6.setVisible(false);
                    this.jLabel7.setVisible(false);
                    this.year.setVisible(false);
                    this.year1.setVisible(false);
                    this.month.setVisible(false);
                    this.month1.setVisible(false);
                    this.day.setVisible(false);
                    this.day1.setVisible(false);
                    this.ok.setVisible(false);


                    JPanel report = this.loadScriptSex(Services.getTitleAt(Services.getSelectedIndex()),"Sexes Breakdown, Tui Na");
                    report.setVisible(true);
                    report.setSize(300, 300);
                    TuiNa.removeAll();
                    TuiNa.add(report);
                    exportButton.setVisible(true);
                    graphWith = "Sex";
		
		}
           
            if(evt.getSource() == Age && Services.getTitleAt(Services.getSelectedIndex()).equals("Hilot"))
		{


                    this.jLabel4.setVisible(false);
                    this.jLabel5.setVisible(false);
                    this.jLabel6.setVisible(false);
                    this.jLabel7.setVisible(false);
                    this.year.setVisible(false);
                    this.year1.setVisible(false);
                    this.month.setVisible(false);
                    this.month1.setVisible(false);
                    this.day.setVisible(false);
                    this.day1.setVisible(false);
                    this.ok.setVisible(false);
                    JPanel report = this.loadScriptAge(Services.getTitleAt(Services.getSelectedIndex()),"Age Breakdown, Hilot");
                    report.setVisible(true);
                    report.setSize(300, 300);
                    Hilot.removeAll();
                    Hilot.add(report);
                    exportButton.setVisible(true);
                    graphWith = "Age";
		
		}
            if(evt.getSource() == Age && Services.getTitleAt(Services.getSelectedIndex()).equals("Swedish"))
		{


                    this.jLabel4.setVisible(false);
                    this.jLabel5.setVisible(false);
                    this.jLabel6.setVisible(false);
                    this.jLabel7.setVisible(false);
                    this.year.setVisible(false);
                    this.year1.setVisible(false);
                    this.month.setVisible(false);
                    this.month1.setVisible(false);
                    this.day.setVisible(false);
                    this.day1.setVisible(false);
                    this.ok.setVisible(false);
                    JPanel report = this.loadScriptAge(Services.getTitleAt(Services.getSelectedIndex()),"Age Breakdown, Swedish Massage");
                    report.setVisible(true);
                    report.setSize(300, 300);
                    Swedish.removeAll();
                    Swedish.add(report);
                    exportButton.setVisible(true);
                    graphWith = "Age";
		
		}
            
            if(evt.getSource() == Age && Services.getTitleAt(Services.getSelectedIndex()).equals("Thai-Shiatsu"))
		{


                    this.jLabel4.setVisible(false);
                    this.jLabel5.setVisible(false);
                    this.jLabel6.setVisible(false);
                    this.jLabel7.setVisible(false);
                    this.year.setVisible(false);
                    this.year1.setVisible(false);
                    this.month.setVisible(false);
                    this.month1.setVisible(false);
                    this.day.setVisible(false);
                    this.day1.setVisible(false);
                    this.ok.setVisible(false);
                    JPanel report = this.loadScriptAge(Services.getTitleAt(Services.getSelectedIndex()),"Age Breakdown, Thai-Shiatsu");
                    report.setVisible(true);
                    report.setSize(300, 300);
                    ThaiShiatsu.removeAll();
                    ThaiShiatsu.add(report);
                    exportButton.setVisible(true);
                    graphWith = "Age";
		
		}
            
            if(evt.getSource() == Age && Services.getTitleAt(Services.getSelectedIndex()).equals("Tui Na"))
		{

                    this.jLabel4.setVisible(false);
                    this.jLabel5.setVisible(false);
                    this.jLabel6.setVisible(false);
                    this.jLabel7.setVisible(false);
                    this.year.setVisible(false);
                    this.year1.setVisible(false);
                    this.month.setVisible(false);
                    this.month1.setVisible(false);
                    this.day.setVisible(false);
                    this.day1.setVisible(false);
                    this.ok.setVisible(false);

                    JPanel report = this.loadScriptAge(Services.getTitleAt(Services.getSelectedIndex()),"Age Breakdown, Tui Na");
                    report.setVisible(true);
                    report.setSize(300, 300);
                    TuiNa.removeAll();
                    TuiNa.add(report);
                    exportButton.setVisible(true);
                    graphWith = "Age";
		
		}
            
            if(evt.getSource() == viewEmployee)
		{
			System.out.print("s");
			try {
				EmployeeProfile employ_prof = new EmployeeProfile();
				employ_prof.setVisible(true);
				this.setVisible(false);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
			
		
		}
            if(evt.getSource() == modifyE)
            {
                try {
				modifyEmployee mod_employ = new modifyEmployee();
				mod_employ.setVisible(true);
				this.setVisible(false);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				System.out.println("TEST");
				e1.printStackTrace();
			}
            }
            if(evt.getSource() == exportButton)
            {
                String service = Services.getTitleAt(Services.getSelectedIndex());
                System.out.println(service);
                System.out.println(graphWith);
                exportFile export_file = new exportFile(service,graphWith);
                export_file.pack();
                //export_file.setVisible(true);
                //export_file.setVisible(false);
                export_file.save();
                    
                
            }
    }

}
